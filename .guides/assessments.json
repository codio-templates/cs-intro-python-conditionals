[
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2859062537",
  "source": {
   "name": "For Loop",
   "showName": false,
   "instructions": "Rearrange the commands below to make a for loop that find the sum of the numbers between 0 and 100, and then prints the sum.",
   "initial": "total = 0\nfor i in range(101):\n    total = total + i\nprint(total)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "First, the variable `total` is declared and set to 0. Next, write the loop that goes from 0 to 100. Add the value of `i` to `total`. Once the loop has finished running, print `total`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-turtle-2.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": ""
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-turtle-2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT Construct a for loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-859845509",
  "source": {
   "name": "Range",
   "showName": false,
   "instructions": "Which of the following code snippets will loop through all number between 0 and 100 (including 100)?",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "7b77b400-74ba-fa6f-9ce6-5bff613aca93",
     "correct": false,
     "answer": "range(100)"
    },
    {
     "_id": "1c071e4c-5f1a-09fd-8eac-273ba4821b73",
     "correct": true,
     "answer": "range(101)"
    },
    {
     "_id": "cd681509-d98d-b530-806d-3dafbc21303f",
     "correct": false,
     "answer": "range(0, 100)"
    },
    {
     "_id": "61101006-f7df-1c26-d544-d9d921e3139a",
     "correct": true,
     "answer": "range(0, 101, 1)"
    }
   ],
   "guidance": "Remember, the `range` function does not include the ending number. So `range(100)` does not include 100. `range(0, 101, 1)` is correct because this means you increment from 0 to 100 by 1.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how the range function works"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-678412407",
  "source": {
   "name": "While Loop",
   "showName": false,
   "instructions": "Arrange the following lines of code such that the while loop will print \"Python\" 10 times.",
   "initial": "count = 0\nwhile count < 10:\n    print(\"Python\")\n    count = count + 1",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "The variable `count` is declared to keep track of how many times the loop has run. Next, test to see if `count` is less than 10. Finally, print \"Python\" if the above statement is true.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-break-statement.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct a while loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-13057091",
  "source": {
   "name": "Break Statement",
   "showName": false,
   "instructions": "Fill in the blanks such that the loop will stop after it has run 100 times.",
   "text": "```python\ntotal = <<<0>>>\nwhile True:\n    total = total + 1\n    if <<<total>>> > 100<<<:>>>\n        <<<break>>>\n```",
   "guidance": "First, initialize the variable `total` to 0. Then check to see if `total` is greater than 100. Don't forget that if statements end with an `:`. Finally, use a `break` statement to end the loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT properly use a break statement to end a loop",
   "tokens": {
    "blank": [
     "0",
     "total",
     ":",
     "break"
    ],
    "text": [
     "```python\ntotal = ",
     0,
     "\nwhile True:\n    total = total + 1\n    if ",
     0,
     " > 100",
     0,
     "\n        ",
     0,
     "\n```"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1166034184",
  "source": {
   "name": "Nested Loops",
   "showName": false,
   "instructions": "Arrange the lines of code such that you have a correctly coded nested loop. **Hint:** the print statement goes directly after its respective loop.",
   "initial": "for outer in range(5):\n    print(\"Outer loop\")\n    for inner in range(5):\n        print(\"Inner loop\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "The outer loop goes first. The `print` statement that says \"Outer loop\" goes next and is indented four spaces. Now comes the inner loop, which is also indented four spaces. Finally, the `print` statement that says \"Inner loop\" is indented eight spaces.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-nested-loops.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-nested-loops.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT properly indent a nested loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1575521773",
  "source": {
   "name": "Nested Loops",
   "showName": false,
   "instructions": "Fill in the blanks such that the nested loop would print out:\n\n```\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n&&\n*\n*\n*\n```",
   "text": "```\nfor i in range(<<<4>>>):\n    print(\"<<<&&>>>\")\n    for j in range(<<<3>>>):\n        print(\"<<<*>>>\")\n```",
   "guidance": "Since the outer loop controls what is printed first, which is `&&`. Since that occurs four times, the outer loop should run four times. Now print the `&&` symbols. The next thing to be printed is the `*`, which occurs three times per `&&`. So the inner loop should run three times. Finally, print the `*`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT mentally understand the order of a nested loop",
   "tokens": {
    "blank": [
     "4",
     "&&",
     "3",
     "*"
    ],
    "text": [
     "```\nfor i in range(",
     0,
     "):\n    print(\"",
     0,
     "\")\n    for j in range(",
     0,
     "):\n        print(\"",
     0,
     "\")\n```"
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1829566628",
  "source": {
   "name": "Lab Challenge - Loops",
   "showName": true,
   "instructions": "Once your program produces the output above, submit it for a grade.",
   "command": "python3 code/loops/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "This problem is tricky in that there are two sets of alternating output. Within a row, the output alternates between `X` and `O`. Then each row itself alternates between starting with `X` or starting with `O`. The alternating pattern will be handled by asking if a number modulo 2 returns 0. That is, if a number is odd do one thing, if the number is even do something else.\n\nStart by creating the outer loop with `row` as the index. Use an if-else statement to determine if `row` is even or odd.\n\n```python\nfor row in range(8):\n  if row % 2 == 0:\n\n  else:\n```\n\nPrinting a row of characters requires another loop, this time with the index `column`. The first row starts with `X` and then prints `O`. So if `column` is even print an `X` and if it is odd print `O`.\n\n```python\nfor row in range(8):\n  if row % 2 == 0:\n    for column in range(8):\n      if column % 2 == 0:\n        print(\"X\", end='')\n      else:\n        print(\"O\", end='')\n    print()\n  else:\n```\n\nIf `row` is odd you are going copy/paste the loop with `column` but be sure to change the order of `X` and `O`.\n\n```python\nfor row in range(8):\n  if row % 2 == 0:\n    for column in range(8):\n      if column % 2 == 0:\n        print(\"X\", end='')\n      else:\n        print(\"O\", end='')\n    print()\n  else:\n    for column in range(8):\n      if column % 2 == 0:\n        print(\"O\", end='')\n      else:\n        print(\"X\", end='')\n    print()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "XOXOXOXO\nOXOXOXOX\nXOXOXOXO\nOXOXOXOX\nXOXOXOXO\nOXOXOXOX\nXOXOXOXO\nOXOXOXOX",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/loops/lab-challenge.py",
     "code/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3013013327",
  "source": {
   "name": "What is the purpose of `range` in a for loop?",
   "showName": false,
   "instructions": "## What is the purpose of `range` in a for loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6d2776a8-9432-ffae-aead-79711e05aef3",
     "correct": true,
     "answer": "It sets up the number of iterations the loop will execute."
    },
    {
     "_id": "e2117c44-a075-64a6-b4ee-3892ad21dc95",
     "correct": false,
     "answer": "It limits the values a user can enter."
    },
    {
     "_id": "8df286f8-ef4e-473f-d822-f83a7fdd410d",
     "correct": false,
     "answer": "It is used to constrain the for loop to a minimum number of iterations."
    },
    {
     "_id": "36efab39-1506-fd37-5be3-05429b2c6f9b",
     "correct": false,
     "answer": "It indicates how much memory a for loop can use."
    }
   ],
   "guidance": "The `range` function tells the for loop how many times it will run before ending.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the role of `range` in a for loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3053795523",
  "source": {
   "name": "Syntax troubleshooting",
   "showName": false,
   "instructions": "## Syntax troubleshooting\nWhat is wrong with this code snippet?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8c52c185-eec5-4226-d05f-774cf447f99b",
     "correct": false,
     "answer": "The 0 should be a 1 so the loop executes correctly."
    },
    {
     "_id": "27671322-0427-7df5-caa9-026ea3f7f267",
     "correct": false,
     "answer": "The comma should be a semi-colon."
    },
    {
     "_id": "14625554-ebaf-7a4f-2025-88f5d65e4fbc",
     "correct": false,
     "answer": "The comma should be a colon."
    },
    {
     "_id": "2abfe746-c528-335d-e29a-e352e9cca756",
     "correct": true,
     "answer": "There should be a colon after the `(0,4)` portion of the code."
    }
   ],
   "guidance": "When declaring a for loop, a colon (`:`) follows the `range` function.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT properly declare a for loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2284610587",
  "source": {
   "name": "While Predicates",
   "showName": false,
   "instructions": "## While predicates\nTrue of False: the following code snippet is valid for a while loop.\n\n```python\nwhile True\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c7d05757-f64d-deb0-91c7-0317f1e21506",
     "correct": true,
     "answer": "True"
    },
    {
     "_id": "bb9492d1-bdcd-7d6e-5b09-a1f7d42fac11",
     "correct": false,
     "answer": "False"
    }
   ],
   "guidance": "`while True` is a valid statement.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the validity of `while True`"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4153609342",
  "source": {
   "name": "Interrupt a While Loop",
   "showName": false,
   "instructions": "## Interrupt a while loop\nWhat keyword can you use to interrupt, or end, the execution of a while loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6a5ed49a-3f22-e293-e0b6-ebd61d16195d",
     "correct": false,
     "answer": "pause"
    },
    {
     "_id": "184b0fd7-24cc-9a3c-ccf7-5bd4f8d561f0",
     "correct": true,
     "answer": "break"
    },
    {
     "_id": "d13f8ed8-3ef1-c27f-0d42-1e1e1c6f7af5",
     "correct": false,
     "answer": "halt"
    },
    {
     "_id": "c2fc5267-fe4f-275d-4ba5-d2e1337058ef",
     "correct": false,
     "answer": "stop"
    }
   ],
   "guidance": "The `break` statement is used to stop a while loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recall the use of `break` to end a while loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3308526727",
  "source": {
   "name": "Interrupt a while loop 2",
   "showName": false,
   "instructions": "## Interrupt a while loop\nWhat is the result of running the following code?\n\n```python\ntime = 2\nwhile True:\n    print('The time is ', str(time))\n    if time == 2:\n        time = 6\n    else:\n        break\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c198d68c-8029-5162-b3df-a6f113e7c7f3",
     "correct": false,
     "answer": "'The time is 2'"
    },
    {
     "_id": "8fe5ec1d-3e42-0fd4-a563-2b4373d799b0",
     "correct": false,
     "answer": "'The time is 6'"
    },
    {
     "_id": "3fef2416-08a0-0a69-c0c3-0173f04d1c5b",
     "correct": false,
     "answer": "A syntax error is generated"
    },
    {
     "_id": "1dbcf270-195d-25d3-7f8c-82ff671a13d1",
     "correct": true,
     "answer": "'The time is 2' and 'The time is 6'"
    }
   ],
   "guidance": "The first time the loop runs, it prints `The time is 2`. Since `time` is equal to 2, `time` is updated to 6. The loop runs a second time and prints `The time is 6`. Since `time` is not equal to 2, the loop ends with the `break` statement.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/loops/lab-break.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/lab-break.py"
     },
     {
      "type": "terminal",
      "panelNumber": 1,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT mentally walk through a loop and determine its result"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1993921012",
  "source": {
   "name": "Exercise 1",
   "showName": false,
   "instructions": "## Drawing with turtle graphics\n\nRearrange the code blocks below to draw a triangle. Click on the **Model Drawing** to see the turtle animation.",
   "initial": "t = turtle.Turtle()\n\nfor i in range(3):\n    t.forward(100)\n    t.lt(120)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"max_wrong_lines\": 1,\n  \"turtleModelCode\": \"modelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\\nmodelTurtle.forward(100)\\nmodelTurtle.left(120)\",\n  \"grader\": \"ParsonsWidget._graders.TurtleGrader\",\n  \"executable_code\": \"for i in range(0,3):\\nmyTurtle.forward(100)\\nmyTurtle.left(120)\\npass\",\n  \"programmingLang\": \"pseudo\"\n}",
   "grader": "5",
   "guidance": "The first thing to do is to declare the variable `t` as a Turtle object. Then start the loop. In the model drawing, the turtle advances forward before turning. Use the `forward` block before the `lt` block. Don't forget to indent the commands that are a part of the loop.\n\n```python\nt = turtle.Turtle()\nfor i in range(3):\n    t.forward(100)\n    t.lt(120)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Turtle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT draw a triangle with a for loop and Python turtle"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2041964435",
  "source": {
   "name": "Exercise 5",
   "showName": false,
   "instructions": "## Submit your work\nOnce you get your code working properly, submit it by clicking the button below.",
   "command": "python3 code/exercise-5.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "....1\n...2\n..3\n.4\n5",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/exercise-5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/exercise-5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT use nested loops"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2688734983",
  "source": {
   "name": "While loop",
   "showName": false,
   "instructions": "## Create a while loop\nFrom the code blocks below, create a while loop that will iterate ten times. **Note:** not all code blocks will be used.",
   "initial": "\ncount = 0\nwhile count < 10:\n    count = count + 1\ncount = 1 #distractor\nwhile count < range(10): #distractor\n    count = count #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start by creating the variable `count` and setting its value to 0. If you set its value to 1, the loop will not run 10 times. Use the line `while count < 10` for the loop. While loops do not use the `range` keyword; for loops do. Finally, `count` needs to increase so that this is not an infinite loop. Use the code block `count = count + 1`.\n\n```python\ncount = 0\nwhile count < 10:\n    count = count + 1\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4155526204",
  "source": {
   "name": "While True",
   "showName": false,
   "instructions": "## While loop\nUsing `while True:`, create a loop that prints the sum of all the numbers between 0 and 100. **Note:** the sum should include the number 100.",
   "command": "python3 code/loops/exercise-3.py",
   "preExecuteCommand": "",
   "guidance": "There are several ways to solve this problem. Here is one of them. You will need two variables; one for the while loop and another for the total. Declare `total` and `count` and set them both to 0. The loop needs to include the number 100. That means the loop should run as long as `count` is less than 101. The `total` variable is assigned itself plus the value of `count`. Finally, increment `count` by 1.\n\n```python\ntotal = 0\ncount = 0\nwhile count < 101:\n  total = total + count\n  count += 1\nprint(total)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "5050",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/loops/exercise-3.py",
     "code/exercise-3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/exercise-3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create a while true loop that breaks when a certain condition is met"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1303194131",
  "source": {
   "name": "Turtle Graphic",
   "showName": false,
   "instructions": "## Turtle graphic\nRearrange the code blocks below so that their output would be the image above. If you need to practice, use the code editor to the left and press the `TRY IT` button to see your output in the tab entitled `Preview https:/...`. **Note:** it is not important that your colors match.",
   "initial": "for j in range(4):\n    for i in range(4):\n        t.forward(50)\n        t.rt(90)\n    t.forward(100)\nfor i in range(4):\n        t.forward(50)\n        t.rt(90)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/exercise-4.py"
    ],
    "opened": [
     {
      "type": "preview",
      "panelNumber": 0,
      "content": "https://{{domain3000}}/"
     },
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/exercise-4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT use loops while taking into account a fence post issue"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2318046941",
  "source": {
   "name": "Python Print Statement",
   "showName": false,
   "instructions": "## Print Statement\nWhat does the `print` statement do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8d434707-f06e-b243-0255-e907d93f0070",
     "correct": false,
     "answer": "Sends your output to the printer"
    },
    {
     "_id": "384abd09-2074-9d98-7a37-0d1a4d0117af",
     "correct": false,
     "answer": "Sends your output to a file"
    },
    {
     "_id": "25e0febb-abe7-7958-8b77-77e694128374",
     "correct": true,
     "answer": "Sends your output to the screen"
    },
    {
     "_id": "5010b36f-4055-fdc4-8681-3d0f640b737a",
     "correct": false,
     "answer": "Sends your output to the compiler"
    }
   ],
   "guidance": "The `print` command sends your output to the screen.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Fundametals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-printing2.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT recognize what the print command does"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2419368717",
  "source": {
   "name": "Python Variables",
   "showName": false,
   "instructions": "## Variables\nWhich of the following items is a correct variable name?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "86d55fed-5e50-dc95-0c39-457ed5470948",
     "correct": false,
     "answer": "`my-variable`"
    },
    {
     "_id": "508b2e1b-57a8-14d4-43bd-4fc3bf7d3bb4",
     "correct": true,
     "answer": "`_my_variable`"
    },
    {
     "_id": "b6f5b9aa-1eaa-a93a-7587-3db734c3a1e0",
     "correct": false,
     "answer": "`1_my_variable`"
    },
    {
     "_id": "5b84c7bc-ffe0-98bb-5a35-e0665a15500a",
     "correct": false,
     "answer": "`my_variable!`"
    }
   ],
   "guidance": "Here are the basic rules for variable names:\n* Must start with an underscore or a letter\n* The rest of the variable can contain letters, numbers, or underscores\n* May not use a Python keyword",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT declare a valid variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3378723738",
  "source": {
   "name": "Python Data Types",
   "showName": false,
   "instructions": "What are the four basic data types of Python?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "23aedede-9c0e-a742-d588-877fd749727a",
     "correct": true,
     "answer": "strings, boolean, ints, and floats"
    },
    {
     "_id": "6d566a80-d985-7ef4-7eec-af61579092a5",
     "correct": false,
     "answer": "strings, true/false, numbers, decimals"
    },
    {
     "_id": "fcb187e2-6e33-2526-d969-e53194ba9fe3",
     "correct": false,
     "answer": "boolean, hexadecimal, ints, strings"
    },
    {
     "_id": "788a6d19-7c1c-2c68-4928-59dd1c6c90c2",
     "correct": false,
     "answer": "numbers, images, audio, video"
    }
   ],
   "guidance": "The four basic data types that you have learned so far are:\n* strings - collections of letters, numbers, and symbols\n* boolean - true or false\n* ints - integers (no decimal)\n* floats - numbers with a decimal",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the four basic data types"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1021258373",
  "source": {
   "name": "Python print without newline character",
   "showName": false,
   "instructions": "## Printing Without the Newline Character\nFill in the blank with the missing text that will print the text `Hi!` without adding a newline character?",
   "text": "`print(\"Hi!\", end=<<<''>>>)`",
   "guidance": "To remove the newline character from the `print` command, you need to add `end=''` to the command. The correct answer looks like this: `print(\"Hi!\", end='')`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT write a print command without a newline character",
   "tokens": {
    "blank": [
     "''"
    ],
    "text": [
     "`print(\"Hi!\", end=",
     0,
     ")`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2557587753",
  "source": {
   "name": "reading question print command",
   "showName": false,
   "instructions": "## Reading Question\nWhat is wrong with the code snippet below?\n\n```python\nprint(Hello world)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a4930806-2307-6729-d50e-1f8bb9609c32",
     "correct": false,
     "answer": "Capitalize `print`"
    },
    {
     "_id": "8b03a313-48be-379b-ff85-deb7f21f3994",
     "correct": false,
     "answer": "Use `{ }` instead of `( )`"
    },
    {
     "_id": "06d9d513-0a6f-51a3-283a-09f0aa106f60",
     "correct": true,
     "answer": "Missing `\" \"` around `Hello world`"
    },
    {
     "_id": "efa1bc6a-4f01-07e8-12e1-1193809940b2",
     "correct": false,
     "answer": "Add a `;` at the end of the line of code"
    }
   ],
   "guidance": "After the `print` command use parentheses and quotation marks around the words to be printed.\n\n`print(\"Hello world\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print command"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Using quotes in the print command"
     }
    ],
    "files": [
     "code/fundamentals/playground-printing.py",
     "code/playground-printing.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-printing.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the components needed to print a string to the console"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3628483659",
  "source": {
   "name": "print command newline character",
   "showName": false,
   "instructions": "## Reading Question\nTrue or False: Python automatically inserts a newline character when you use the `print` command.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8f73bf45-99c3-450a-452e-85625551e7eb",
     "correct": true,
     "answer": "True"
    },
    {
     "_id": "c62f86a2-eac6-8045-0fc0-c01fb52e4d39",
     "correct": false,
     "answer": "False"
    }
   ],
   "guidance": "True. When you use the `print` command, Python inserts a newline character automatically.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print command"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [
     "code/playground-printing2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-printing2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT understand that newline characters are added by default"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-928839981",
  "source": {
   "name": "case sensitive variables",
   "showName": false,
   "instructions": "## Reading Question\nTrue or False: the two names refer to the same variable.\n`My_Variable`\n`my_variable`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "10c3413a-b154-12da-35f4-8ed296ebf23b",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "2c6ce430-cd1c-3a03-7cdd-cb10b9c0a23e",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "False. Python is a case sensitive language. That means variable names with capital letters are different those with lowercase letters.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable names"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Case sensitive"
     }
    ],
    "files": [
     "code/playground-variables1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-variables1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the case sensitive nature of variable names"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2757362999",
  "source": {
   "name": "declaring and overwriting variables",
   "showName": false,
   "instructions": "## Reading Question\nFrom the collection of code blocks, drag out **two** such that the first block declares the variable `my_variable` and assigns it the value of `\"red\"` and the second code block overwrites this with `\"blue\"`.",
   "initial": "my_variable = \"red\"\nmy_variable = \"blue\"\nvar my_variable = \"red\" #distractor\nmy_variable = red #distractor\nvar my_variable = \"blue\" #distractor\nmy_variable = blue #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Since you have to declare the variable with the value `\"red\"`, this line of code must come first. The second line will assign the value `\"blue\"` to the variable.\n\nPython does not use the `var` keyword to declare variables.\n\n```python\nmy_variable = \"red\"\nmy_variable = \"blue\"\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Declare and overwrite values"
     }
    ],
    "files": [
     "code/fundamentals/playground-assign-value.py",
     "code/playground-assign-value.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-assign-value.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand the difference between declaring a variable and overwriting its value"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3755866164",
  "source": {
   "name": "string reading question",
   "showName": false,
   "instructions": "## Reading Question\nComplete the line of code below so that variable declaration is correct.",
   "text": "`my_string = \"This is a string<<<\">>>`",
   "guidance": "Since the beginning of the string starts with a double-quotation mark, you need to end the string with a double-quotation mark.\n\n`my_string = \"This is a string\"`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Using appropriate quotation mark (\" or ')"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize the need to be consistent with the type of quotation mark used",
   "tokens": {
    "blank": [
     "\""
    ],
    "text": [
     "`my_string = \"This is a string",
     0,
     "`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-397882862",
  "source": {
   "name": "boolean reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the rule regarding boolean values in Python?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2a14a4dd-e0a9-583a-7863-c0e4c545a482",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be lowercase. "
    },
    {
     "_id": "223f2866-8e5d-a1ae-1313-f28924cb7da4",
     "correct": false,
     "answer": "Boolean values are not case sensitive and can be either uppercase or lowercase."
    },
    {
     "_id": "5032ef8c-2720-52c3-24fe-13242794a627",
     "correct": true,
     "answer": "Boolean values are case sensitive and must be uppercase. "
    },
    {
     "_id": "e91a8a64-a81f-ec1b-61ff-85a3e9a7a276",
     "correct": false,
     "answer": "Boolean values are case sensitive and must be all caps."
    }
   ],
   "guidance": "Boolean values in Python are case sensitive. They must start with a capital letter.\n`True` and `False`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Boolean"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Capitalization"
     }
    ],
    "files": [
     "code/playground-types.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT properly capitalize boolean values"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-744756114",
  "source": {
   "name": "float reading question",
   "showName": false,
   "instructions": "## Reading Question\nFrom the lines of text below, drag **two** of them into answer space. Your answer should explain the difference between a float and an int.",
   "initial": "A float is a decimal number,\nwhile an int is a whole number.\nA float is a whole number, #distractor\nwhile an int is a decimal number. #distractor\nA float is an irrational number, #distractor\nwhile an int is a rational number. #distractor",
   "options": "{\n  \"searchId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "A floating point number is one with a decimal. An int is a whole number (or integer).",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Difference between float and int"
     }
    ],
    "files": [
     "code/playground-types-float.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/playground-types-float.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT describe the difference between a float and an int"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3707172048",
  "source": {
   "name": "fundamentals lab challenge",
   "showName": false,
   "instructions": "## Fundamentals Lab Challenge\nYou now know how to declare variables with four different data types and print these variables.\n\nRearrange the code blocks below such that you have a program that prints the output below. Note, you **will not** use all of the code blocks for your solution.\n\n```python\nPython fundamentals are very useful\n```",
   "initial": "variable_1 = \"Python fundamentals are very useful\"\nvariable_2 = variable_1\nprint(variable_2)\nvariable_1 = variable_2 #distractor\nvariable_1 = Python fundamentals are very useful #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "There is only one `print` command, and it prints the value of `variable_2`. So, `variable_2` must contain the phrase `Python fundamentals are very useful`. Since this phrase is stored in `variable_1`, then you need to set the value of `variable_2` to that of `variable_1`.\n\n```python\nvariable_1 = \"Python fundamentals are very useful\"\nvariable_2 = variable_1\nprint(variable_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Variables and Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Combine print and variable assignments"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use variable declarations and a print statement to output a particular phrase"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1001048360",
  "source": {
   "name": "fundamentals exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDeclare a variable `my_boolean` and assign it the boolean value of true. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-1-helper.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_boolean = True\nprint(my_boolean)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "True\nTrue",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a boolean variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1343612139",
  "source": {
   "name": "fundamentals exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nDeclare a variable `my_int` and assign it the integer value of 3. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-2-helper.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_int = 3\nprint(my_int)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "True\n3",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Interger variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise2.py",
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print an integer variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2882174987",
  "source": {
   "name": "fundamentals exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nDeclare a variable `my_string` and assign it the string value of:\n\n`This is a string`\n\nPrint the variable.",
   "command": "python3 code/fundamentals/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "```python\nmy_string = \"This is a string\"\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "This is a string",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String varaibles"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a string variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1795615497",
  "source": {
   "name": "fundamentals exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nDeclare a variable `my_float` and assign it the floating point value of 3. Print the variable.",
   "command": "python3 code/fundamentals/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "3.0",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Float variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a float variable"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1941220880",
  "source": {
   "name": "fundamentals exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nUse **two** print statements to write the following string:\n\n`Okay, it is time to learn about operators.`",
   "command": "python3 code/fundamentals/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "The trick is to remove the newline character that is implicit with a `print` command. The sentence can be divided any way you want, but you need to use `end=''` in the first `print`.\n\n```python\nprint(\"Okay, it is time to \", end='')\nprint(\"learn about operators.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Okay, it is time to learn about operators.",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Print"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [
     "code/fundamentals/exercise5.py",
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT remove the newline character from print"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3865967629",
  "source": {
   "name": "reading question addition",
   "showName": false,
   "instructions": "## Reading Question\nWhat happens when you add an int and a float?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b1a59626-783a-6336-761b-f3b4aa999ab1",
     "correct": false,
     "answer": "You get a syntax error"
    },
    {
     "_id": "b5dede3c-94db-a929-49fb-f39d0ad735b6",
     "correct": false,
     "answer": "You get an int"
    },
    {
     "_id": "48599ce6-654e-13f6-67d6-28d4ab07d3fd",
     "correct": true,
     "answer": "You get a float"
    }
   ],
   "guidance": "Since a float can represent the same value as an integer (`2.0` is the same value as `2`), the result will be a float. For example:\n\n`7.0 + 3 = 10.0`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Addition"
     }
    ],
    "files": [
     "code/operators/playground-addition.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-addition.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize that a float plus an int returns a float"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2430243078",
  "source": {
   "name": "string concatenation reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below so that code will print:\n\n`I love string concatenation!`",
   "text": "```python\na = \"I love\"\nb = <<<\" string concatenation!\">>>\nc = <<<a + b>>>\nprint(c)\n```",
   "guidance": "Since there is not trailing space in the first line of code, the value of `b` must start with a leading space:\n\n`b = \" string concatenation!\"`\n\n`c` should be the resulting string when you concatenate `a` and `b`:\n\n`c = a + b`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Strings"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Concatenation"
     }
    ],
    "files": [
     "code/operators/playground-concatenation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-concatenation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT concatenate strings",
   "tokens": {
    "blank": [
     "\" string concatenation!\"",
     "a + b"
    ],
    "text": [
     "```python\na = \"I love\"\nb = ",
     0,
     "\nc = ",
     0,
     "\nprint(c)\n```"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1387852852",
  "source": {
   "name": "reading question increment",
   "showName": false,
   "instructions": "## Reading Question\nComplete the code below so that the variable `a` is incremented by 1.",
   "text": "a = 0\na = <<<a + 1>>>",
   "guidance": "Remember, when incrementing, the new value of `a` is assigned the old value of `a` plus 1.\n\n`a = a + 1`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Increment a variable"
     }
    ],
    "files": [
     "code/operators/playground-addition.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-addition.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT increment a variable by 1",
   "tokens": {
    "blank": [
     "a + 1"
    ],
    "text": [
     "a = 0\na = ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3899963352",
  "source": {
   "name": "type casting reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following lines of code is **not** an example of type casting?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "66f7e47a-7dba-a926-6702-660251d3f2ce",
     "correct": false,
     "answer": "int(a)"
    },
    {
     "_id": "23dca353-32a9-56ad-eeab-d914be1a5e39",
     "correct": true,
     "answer": "string(a)"
    },
    {
     "_id": "4c5026ed-05b3-cc26-dfd8-5126758264c1",
     "correct": false,
     "answer": "float(a)"
    },
    {
     "_id": "4b46c010-2b52-566a-faaf-763312280742",
     "correct": false,
     "answer": "bool(a)"
    }
   ],
   "guidance": "Python uses abbreviations for type casting:\n* `int` is an integer\n* `float` is a floating point number\n* `str` is a string\n* `bool` is a boolean",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Type casting"
     }
    ],
    "files": [
     "code/operators/playground-type-cast.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-type-cast.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT recognize type casting statements"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1960280201",
  "source": {
   "name": "subtraction reading question",
   "showName": false,
   "instructions": "## Reading Question\nRewrite the code below using the `-=` operator.\n\n```python\na = 42\nb = 17\na = a - b\n```",
   "text": "a = 42\nb = 17\na <<<-= b>>>",
   "guidance": "Using the `-=` operator means you do not need to use the `a` variable twice.\n\n`a -= b`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Subtraction"
     }
    ],
    "files": [
     "code/operators/playground-subtract.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-subtract.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the -= operator",
   "tokens": {
    "blank": [
     "-= b"
    ],
    "text": [
     "a = 42\nb = 17\na ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2775133348",
  "source": {
   "name": "division reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following statements about division in Python is **FALSE**?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6e07ef85-6277-b5d2-4df4-30213fb5a672",
     "correct": false,
     "answer": "You can divide a number by `True`."
    },
    {
     "_id": "a9e6eb0e-e55f-18cd-6808-35593f081805",
     "correct": true,
     "answer": "The `/` operator sometimes returns an integer."
    },
    {
     "_id": "8f30e985-771d-ea99-724c-de031c939e0e",
     "correct": false,
     "answer": "You are not allowed to divide by 0."
    },
    {
     "_id": "30a5ed15-b870-71c0-b094-e256d823aaaa",
     "correct": false,
     "answer": "The `//` operator never returns a float."
    }
   ],
   "guidance": "The `/` operator never returns an integer. It always returns a float. Use the `//` operator if you want an integer.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Division"
     }
    ],
    "files": [
     "code/operators/playground-division.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-division.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand how Python evaluates division"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2879887257",
  "source": {
   "name": "multiplication reading question",
   "showName": false,
   "instructions": "## Reading Question\nComplete the code below so that the program prints the product of `a` and `b`.",
   "text": "```\na = 9\nb = 3\nprint(a <<<* b>>>)\n```",
   "guidance": "Use `*` for multiplication. You also need to add the variable `b`, multiplication requires two numbers.\n\n`print(a * b)`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiplication"
     }
    ],
    "files": [
     "code/operators/playground-multiply.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-multiply.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the multiplication operator",
   "tokens": {
    "blank": [
     "* b"
    ],
    "text": [
     "```\na = 9\nb = 3\nprint(a ",
     0,
     ")\n```"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3925273068",
  "source": {
   "name": "order of operations reading question",
   "showName": false,
   "instructions": "## Reading Question\nDrag the blocks that reflect the order of operations for Python.",
   "initial": "Parentheses\nExponents\nMultiplication\nDivision\nAddition\nSubtraction",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Python uses PEMDAS for order of operations: **P**arentheses, **E**xponents, **M**ultiplication, **D**ivision, **A**ddition, and **S**ubtraction.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [
     "code/operators/playground-pemdas.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-pemdas.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use PEMDAS for order of operations"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2995934469",
  "source": {
   "name": "powers reading question",
   "showName": false,
   "instructions": "## Reading Question\nWrite a line of code that raises 7 to the power of 4.",
   "text": "<<<7 ** 4>>>",
   "guidance": "The power operator in Python is `**`. Since 7 is being raised to the power of 4, the answer is:\n\n`7 ** 4`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Powers"
     }
    ],
    "files": [
     "code/operators/playground-powers.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-powers.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the power operator",
   "tokens": {
    "blank": [
     "7 ** 4"
    ],
    "text": [
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-517993150",
  "source": {
   "name": "modulo reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat does modulo do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "b0d51429-3aed-01ca-92ad-ce20cbc0e65f",
     "correct": false,
     "answer": "Determines if a number is even or odd"
    },
    {
     "_id": "be60e267-1540-5a7d-b705-874825e51125",
     "correct": false,
     "answer": "Is another name for division"
    },
    {
     "_id": "7f6f426e-a8f5-8703-e695-57f28c61f927",
     "correct": false,
     "answer": "Determines the percentage of two numbers"
    },
    {
     "_id": "6cd89e95-d353-b8e1-9171-f09a48854a72",
     "correct": true,
     "answer": "Returns the remainder after division is performed"
    }
   ],
   "guidance": "Modulo is the remainder after division is performed. So division is a part of modulo, but modulo is not division. Modulo can be used to determine if a number is even or odd, but modulo can do more than that. Finally, the `%` is used with modulo, but modulo does not deal with percentages.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modulo"
     }
    ],
    "files": [
     "code/operators/playground-modulo.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-modulo.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand the function of modulo"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3881232648",
  "source": {
   "name": "operators formative assessment 1",
   "showName": false,
   "instructions": "## Python Operators\nWhat is the result of the following line of code?\n\n`7 / 2 + (5 % 2 * 5) ** 2 - 3`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "7cf56c31-8bde-0880-4f1a-86a3b2ed4866",
     "correct": false,
     "answer": "-2"
    },
    {
     "_id": "b946dd72-cd91-06fb-0307-67afe9df169f",
     "correct": false,
     "answer": "3.7"
    },
    {
     "_id": "48a58ed6-f9f0-9a4c-7136-9cf3f3cf6e98",
     "correct": true,
     "answer": "25.5"
    },
    {
     "_id": "70c9da1e-96b4-9af0-0904-c855a6864bc7",
     "correct": false,
     "answer": "69.25"
    }
   ],
   "guidance": "Using PEMDAS, here is the order in which the operations should be completed.\n\n1) `5 % 2 * 5` because it is in parentheses. The result is `5`.\n2) `5 ** 2` because exponents come next. The result is `25`\n3) `7 / 2` comes next because it is division. The result is `3.5`.\n4) `3.5 + 25 - 3` because addition and subtraction are last. The result is `25.5`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Synthesis of operators"
     }
    ],
    "files": [
     "code/operators/playground-modulo.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT combine order of operations and the different Python operators"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1458125378",
  "source": {
   "name": "operations formative assessment",
   "showName": false,
   "instructions": "## Order of Operations\nDrag the blocks below into the proper order of operations. You **will not** use all of the blocks.",
   "initial": "Parentheses\nExponents\nMultiplication and Division\nAddition and Subtraction\nTop to bottom #distractor\nGo from left to right #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Order of operation is determined by PEMDAS - Parentheses, Exponents, Multiplication and Division, and Addition and Subtraction.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [
     "code/operators/playground-modulo.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-modulo.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT determine the order of operations"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4192662618",
  "source": {
   "name": "Equality operator reading question",
   "showName": false,
   "instructions": "## Reading Question\nEnter the appropriate operator for each definition.",
   "text": "This operator checks if two values are equal - <<<==>>>\nThis operator assigns a value to a variable - <<<=>>>\nThis operator checks if two values are not equal - <<<!=>>>",
   "guidance": "* The `=` operator assigns a value to a variable\n* The `==` operator checks equality between two values\n* The `!=` operator checks inequality between two values",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Equality and inequality"
     }
    ],
    "files": [
     "code/operators/playground-equality.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-equality.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT differentiate between the assignment, equality, and inequality operators",
   "tokens": {
    "blank": [
     "==",
     "=",
     "!="
    ],
    "text": [
     "This operator checks if two values are equal - ",
     0,
     "\nThis operator assigns a value to a variable - ",
     0,
     "\nThis operator checks if two values are not equal - ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2569267396",
  "source": {
   "name": "less than reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following conditions would cause the expression `a <= b` to equate to true? **Hint:** there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "fdac3ba8-fbec-6f47-cefc-827e7a8d333a",
     "correct": true,
     "answer": "If `a` is less than `b`"
    },
    {
     "_id": "997aa2a9-3831-2839-25ea-6d7677089e45",
     "correct": false,
     "answer": "If `a` is less than and equal to `b`"
    },
    {
     "_id": "a4353528-7b00-96c9-23d0-cffcfa040a38",
     "correct": true,
     "answer": "If `a` is equal to `b`"
    },
    {
     "_id": "9eb481f4-8332-5a08-544c-055f149e9845",
     "correct": false,
     "answer": "If `a` is not equal to `b`"
    }
   ],
   "guidance": "There are two conditions that would case `a <= b` to be true. One is if `a` is less than `b` and the other is `a` is equal to `b`. As long as one of those conditions is true, then `a <= b` will be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operator"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Less than or equal to"
     }
    ],
    "files": [
     "code/operators/playground-less-than.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-less-than.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT determine when <= will be true"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3351578008",
  "source": {
   "name": "greater than reading question",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the statements below that are true.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "e2ad137b-2509-3b8b-aca0-e0642e0d5a9b",
     "correct": true,
     "answer": "19 >= 19"
    },
    {
     "_id": "7b70e6e8-0315-379c-4b28-37eb5a5e5c75",
     "correct": false,
     "answer": "18.9 >= 19"
    },
    {
     "_id": "05ab013a-fc51-8da0-31a5-0e7405a59b8d",
     "correct": false,
     "answer": "-19 >= 19"
    },
    {
     "_id": "1a56cffc-f8ae-09ab-8372-3158a8216901",
     "correct": true,
     "answer": "19 >= 9"
    }
   ],
   "guidance": "The `>=` operator only returns `True` if the first number is greater than or equal to the second number. So the follow statements would evaluate to true:\n`19 >= 19` and `19 >= 9`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Greater than or equal to"
     }
    ],
    "files": [
     "code/operators/playground-greater-than.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-greater-than.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use the >= operator"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-583769072",
  "source": {
   "name": "and statement reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks for the following two statements.",
   "text": "For an `and` statement to be true, all of the boolean expressions must be <<<true>>>.\n\nFor an `and` statement to be false, only one of the boolean expressions needs to be <<<false>>>.",
   "guidance": "All of the boolean expressions must be true if an `and` statement is true.\n\nOnly one boolean expression needs to be false for an `and` statement to be false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "And operator"
     }
    ],
    "files": [
     "code/operators/playground-and.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-and.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT understand how the and statement works",
   "tokens": {
    "blank": [
     "true",
     "false"
    ],
    "text": [
     "For an `and` statement to be true, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `and` statement to be false, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-855373313",
  "source": {
   "name": "or reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks for the following two statements.",
   "text": "For an `or` statement to be false, all of the boolean expressions must be <<<false>>>.\n\nFor an `or` statement to be true, only one of the boolean expressions needs to be <<<true>>>.",
   "guidance": "The `or` operator requires that all boolean expressions be false for the whole thing to be false.\n\nHowever, only one boolean expressions needs to be true for an `or` operator to be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Or operator"
     }
    ],
    "files": [
     "code/operators/playground-or.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-or.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT understand how the or operator works",
   "tokens": {
    "blank": [
     "false",
     "true"
    ],
    "text": [
     "For an `or` statement to be false, all of the boolean expressions must be ",
     0,
     ".\n\nFor an `or` statement to be true, only one of the boolean expressions needs to be ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-496869741",
  "source": {
   "name": "not reading question",
   "showName": false,
   "instructions": "## Reading Question\nEvaluate the two expressions below.",
   "text": "`5 != 4` returns <<<true>>>\n`not 5 == 4` returns <<<true>>>",
   "guidance": "`5 != 4` returns `True`\n`not 5 == 5` returns `True`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Not operator"
     }
    ],
    "files": [
     "code/operators/playground-not.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-not.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the not operator",
   "tokens": {
    "blank": [
     "true",
     "true"
    ],
    "text": [
     "`5 != 4` returns ",
     0,
     "\n`not 5 == 4` returns ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-841167959",
  "source": {
   "name": "short circuiting reading question",
   "showName": false,
   "instructions": "## Reading Question\nUse the dropdown menus to complete the text below.",
   "text": "## `or` Operator\nWhen using the `or` operator, Python checks to see if the first boolean expression is <<<true>>>. If it is <<<true>>>, Python returns <<<true>>> and ignores the second boolean expression.\n\n## `and` Operator\nWhen using the `and` operator, Python checks to see if the first boolean expression is <<<false>>>. If it is <<<false>>>, Python returns <<<false>>> and ignores the second boolean expression.",
   "guidance": "If the first boolean expression for the `or` operator is true, then the entire thing is true. The second boolean expression is ignored.\n\nIf the first boolean expression for the `and` operator is false, then the entire thing is false. The second boolean expression is ignored.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Short circuiting"
     }
    ],
    "files": [
     "code/operators/playground-short-circuiting.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-short-circuiting.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT explain what short circuiting means",
   "tokens": {
    "blank": [
     "true",
     "true",
     "true",
     "false",
     "false",
     "false"
    ],
    "text": [
     "## `or` Operator\nWhen using the `or` operator, Python checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Python returns ",
     0,
     " and ignores the second boolean expression.\n\n## `and` Operator\nWhen using the `and` operator, Python checks to see if the first boolean expression is ",
     0,
     ". If it is ",
     0,
     ", Python returns ",
     0,
     " and ignores the second boolean expression."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3233497894",
  "source": {
   "name": "boolean operators formative assessment 1",
   "showName": false,
   "instructions": "## Evaluating Expressions\nUsing your knowledge of boolean operators and order of operations, determine the result of the code below.\n\n```python\n5 ** 2 > (8 / 2) ** 2 and 10 % 4 > 3 \n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c00dc6c3-1896-aa9a-6a73-627f1edb1adc",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "060153d7-36f3-19ce-d533-a4485b847cfc",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "Using PEMDAS, here are steps to solving the arithmetic expressions:\n\n1) `5 ** 2` returns `25`\n2) `(8 / 2) ** 2` returns `16.0`\n3) `10 % 4` returns `2`\n4) `25 + 16 - 2` returns `39.0`\n\nSo the boolean expressions are:\n`25 > 16 and 2 > 3`\n\nThe first boolean expression is `True` and the second is `False`. True and False is `False`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations, boolean"
     }
    ],
    "files": [
     "code/operators/playground-short-circuiting.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT evaluate complex boolean expressions using order of operations"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2562209496",
  "source": {
   "name": "boolean operators formative assessment",
   "showName": false,
   "instructions": "## Boolean Operators\nDetermine if the code below returns true or false.\n\n```python\n(7 >= 7) and (True or 99 < 1) or not (3 > 5 and 7 < 10) and 2 != 4\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "319b6e0c-0a29-907c-61f7-3395068b94bf",
     "correct": true,
     "answer": "True"
    },
    {
     "_id": "d85892ee-63c8-90e2-7502-dff0b03690f0",
     "correct": false,
     "answer": "False"
    }
   ],
   "guidance": "First, start by evaluating the expressions in the parentheses. \n* `( 7 >= 7)` returns `True`. \n* (true or 99 < 1) returns `True`\n* `not (3 > 5 and 7 < 10)` returns `True`\n* `2 != 4` returns `True`\n\nSo the boolean expression is now `True and True or True and True`, which returns `True`.\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT compute a complex boolean expression"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3436122489",
  "source": {
   "name": "input test",
   "showName": false,
   "instructions": "## Lab Challenge - Operators",
   "command": "python3 code/operators/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "False",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1248082587",
  "source": {
   "name": "operators lab",
   "showName": false,
   "instructions": "## Lab Challenge - Operators",
   "text": "(3 <<<!=>>> 2) or (10 <<<%>>> < 1) and (5 <<<//>>> 2 <<<==>>> and not 9 <<<<=>>> 9)",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "!=",
     "%",
     "//",
     "==",
     "<="
    ],
    "text": [
     "(3 ",
     0,
     " 2) or (10 ",
     0,
     " < 1) and (5 ",
     0,
     " 2 ",
     0,
     " and not 9 ",
     0,
     " 9)"
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2739191035",
  "source": {
   "name": "lab challenge operators",
   "showName": false,
   "instructions": "## Lab Challenge\nWrite a boolean expression that incorporates one of the equality operators, one of the less than operators, one of the greater than operators, and two of the logical operators (see the table above). The result of your boolean expression must be `False`.",
   "command": "python3 .guides/secure/operators-lab-challenge-test.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "False",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expressions"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT write code using a complex boolean expression"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-977027531",
  "source": {
   "name": "self-check operators 1",
   "showName": false,
   "instructions": "## Identify the operators that match the given description",
   "text": "<<<*>>> is the operator for multiplication\n<<<%>>> is the operator for modulo\n<<<//>>> is the operator for floor division (returns an integer)",
   "guidance": "* `*` is the operator for multiplication\n* `%` is the operator for modulo\n* `//` is the operator for floor division",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modulo, Equality, Floor Division"
     }
    ],
    "files": [
     "code/operators/lab-arithmetic-operators.py",
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-arithmetic-operators.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize the operators which do not align with operators found in math class",
   "tokens": {
    "blank": [
     "*",
     "%",
     "//"
    ],
    "text": [
     0,
     " is the operator for multiplication\n",
     0,
     " is the operator for modulo\n",
     0,
     " is the operator for floor division (returns an integer)"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3217952406",
  "source": {
   "name": "self-check oder of operations",
   "showName": false,
   "instructions": "## Drag the blocks into the correct order of operations",
   "initial": "Parentheses\nExponents\nMultiplication and Division\nAddition and Subtraction",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Order of operations starts with any expression in parentheses. Next, any exponents are calculated. Then multiplication and division are done moving from left to right. Finally, addition and subtraction are done moving from left to right.",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the order of operations"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1366112161",
  "source": {
   "name": "self-check boolean",
   "showName": false,
   "instructions": "## What value do the following operators return?\n\n```\n==, !=, <, <=, >, >=\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "c350bcd4-4026-ddc4-a5f1-896af661e4ff",
     "correct": false,
     "answer": "Float"
    },
    {
     "_id": "9af0561a-e9c4-4b73-6ad7-e1ec109e6b3e",
     "correct": false,
     "answer": "Integer"
    },
    {
     "_id": "d9e4085d-d941-5e1c-8e1d-8c661329afc6",
     "correct": false,
     "answer": "String"
    },
    {
     "_id": "6affa083-651d-3fac-2cf1-9a9119775d0c",
     "correct": true,
     "answer": "Boolean"
    }
   ],
   "guidance": "```\n==, !=, <, <=, >, >=\n```\n\nThe operators above are boolean operators. That means they return either true or false.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Opeators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the return value of boolean operators"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2558245384",
  "source": {
   "name": "self-check",
   "showName": false,
   "instructions": "## Complete the sentences below with the appropriate operator",
   "text": "The <<<or>>> operator returns `True` when at least one of the boolean expressions is true.\n\nThe <<<and>>> operator returns `True` when all of the boolean expressions are true.",
   "guidance": "As long as one boolean expression is true, then the `or` operator will return `True`.\n\nOnly if all boolean expressions are true will, then the `and` operator will return `True`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Logical operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand when and & or return true",
   "tokens": {
    "blank": [
     "or",
     "and"
    ],
    "text": [
     "The ",
     0,
     " operator returns `True` when at least one of the boolean expressions is true.\n\nThe ",
     0,
     " operator returns `True` when all of the boolean expressions are true."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1194669827",
  "source": {
   "name": "self-check operators",
   "showName": false,
   "instructions": "## What is the result of the following expression?\n\n```python\nnot (5 != 3) and (5 % 3 >= 2)\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "861885c2-296e-b8e0-3ffa-20efcf92d218",
     "correct": false,
     "answer": "True"
    },
    {
     "_id": "330f5f4b-c244-758c-524a-a014f77d5c97",
     "correct": true,
     "answer": "False"
    }
   ],
   "guidance": "Starting with parentheses, `5 != 3` is `True`. So `not True` would be `False`. Using the short circuit principal, we can stop evaluating the problem. Because we are using the `and` operator, both boolean expressions must be true for it to return `True`. Since we have `False` for the first expression, it cannot be true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expressions"
     }
    ],
    "files": [
     "code/operators/lab-boolean-operators.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-boolean-operators.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT evaluate a complex boolean expression"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3495364913",
  "source": {
   "name": "operators exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDrag the code blocks into order such that the code returns `17.0`. Not all of the blocks will be used.",
   "initial": "a = 4\nb = 9\na = 10 #distractor\nb = 1 #distractor\na = 9 #distractor\nb = 4 #distractor\n\nprint(a * 3 + b - 8 / 2)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The correct answer is:\n\n```python\na = 4\nb = 9\nprint(a * 3 + b - 8 / 2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use the order of operations"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2974434701",
  "source": {
   "name": "operators exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nGiven the variables below, determine which `print` statement would return `False`.\n\n```python\na = True or False\nb = False and True\nc = False and False\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "e4d1f53d-fd77-9583-f0e2-e4feafa0ee5e",
     "correct": false,
     "answer": "`print(not c and b or a)`"
    },
    {
     "_id": "d2a314fb-c61c-d74d-c389-2b38b82b777e",
     "correct": false,
     "answer": "`print(a and b and c or True)`"
    },
    {
     "_id": "8b90da71-007e-2888-bed9-2a09a3bd50af",
     "correct": true,
     "answer": "`print(not b and not a or not not c)`"
    },
    {
     "_id": "fd77e604-a64f-3f03-f24f-e674e0ea9b13",
     "correct": false,
     "answer": "`print(a or c and not b)`"
    }
   ],
   "guidance": "The correct answer is:\n\n`print(not b and not a or not not c)`\n\nHere are the steps to resolve this expression:\n\n* `print(True and not a or not not c)`\n* `print(True and False or not not c)`\n* `print(True and False or not True)`\n* `print(True and False or False)`\n* `print(False or False)`\n* `print(False)`\n* `False`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Logical operators"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use logical operators"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-173449371",
  "source": {
   "name": "operators exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nWrite a program that outputs `Hello world`. Your program must do the following things:\n\n* Use two variables, one with `Hello ` and the other with `world`.\n* Use a single print statement.",
   "command": "python3 code/operators/exercise3.py",
   "preExecuteCommand": "",
   "guidance": "The variables names can be anything you want. One needs to contain the string `Hello ` and the other `world`. Don't forget that there needs to be a space separating the two words. To print both variables at once, use the `+` operator to concatenate the strings.\n\n```python\nvar_1 = \"Hello \"\nvar_2 = \"world\"\nprint(var_1 + var_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": false,
    "ignoreNewline": false,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Hello world",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String concatenation"
     }
    ],
    "files": [
     "code/operators/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT concatenate two strings"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-240549419",
  "source": {
   "name": "operators exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nWrite a program that divides 7 by 2, but returns `3`.",
   "command": "python3 code/operators/exercise4.py",
   "preExecuteCommand": "",
   "guidance": "Division in Python always returns a float, but your program is expected to return an int. Use the floor division operator (`//`) to return an int. Floor division also truncates `3.5` to `3`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "3",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Floor division"
     }
    ],
    "files": [
     "code/operators/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use floor division"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4228136689",
  "source": {
   "name": "operators exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nWrite a program that produces the following output:\n\n```python\nIs the following boolean true or false?\n5 <= 7 or 7 % 4 < 0 and not 3 != 2\nThe answer is False\n```\n\nYour program must have a boolean expression.",
   "command": "python3 code/operators/exercise5.py",
   "preExecuteCommand": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "Is the following boolean expression true or false?\n5 <= 7 or 7 % 4 < 0 and not 3 != 2\nThe answer is False",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expressions"
     }
    ],
    "files": [
     "code/operators/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT evaluate a complex boolean expression"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2790602047",
  "source": {
   "name": "if statement syntax",
   "showName": false,
   "instructions": "## Reading Question\nRearrange the code blocks below to create an if statement. Not all of the code blocks will be used. **Hint:** do not forget about indenting.",
   "initial": "if 5 > 4:\n    print(\"1st command if true\")\n    print(\"2nd command if true\")\nif 5 > 4 #distractor\nif {5 > 4} #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "If statements in Python do not have `{ }` and end with a `:`. Code that will run if the statement is true must be indented.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Selection statement"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If statement syntax"
     }
    ],
    "files": [
     "code/selection/if-statement-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-statement-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "1",
   "learningObjectives": "SWBAT understand the basic structure of an if statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1352008565",
  "source": {
   "name": "if statement reading questions",
   "showName": false,
   "instructions": "## Reading Question",
   "initial": "grade = 90\nif grade >= 70:\n    print(\"You passed\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Code that should run when the if statement is true should **always** be indented. The Python community indents four spaces.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditinals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Indenting code in an if statement"
     }
    ],
    "files": [
     "code/selection/if-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT structure an if statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-969795572",
  "source": {
   "name": "formative assessment if statement",
   "showName": false,
   "instructions": "## If Statement\nWhat does an if statement **not** do?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a7db6a03-c448-8858-cea1-09b6bc38a703",
     "correct": false,
     "answer": "Evaluates a boolean expression."
    },
    {
     "_id": "8d0b5862-4883-7f40-a39a-99e671924520",
     "correct": true,
     "answer": "Evaluates code when the boolean expression is false."
    },
    {
     "_id": "c6de5aa5-0f84-2082-8027-1d8c90cccca5",
     "correct": false,
     "answer": "Allows your program to make decisions about what to do."
    },
    {
     "_id": "cb24b48a-44c1-3662-5bb4-26aaf018b894",
     "correct": false,
     "answer": "Determines if something is True or False."
    }
   ],
   "guidance": "An if statement does not do anything if the boolean expression is false. It only tests to see if a condition is true. A false expression skips the indented code.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If statement"
     }
    ],
    "files": [
     "code/selection/if-statement.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the purpose of an if statement"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-131952751",
  "source": {
   "name": "Formative assessment if statement",
   "showName": false,
   "instructions": "## Even Numbers\nComplete the if statement below so that it will determine if the variable `num` is greater than 100. **Note**, do not use parentheses when constructing the conditional.",
   "text": "```python\n<<<if>>> num > 100<<<:>>>\n        print(\"num is greater than 100\")\n```",
   "guidance": "The boolean expression is already provided. To complete the if statement, the keyword `if` should be used in the first blank, and a `:` should be used in the second.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean expression"
     }
    ],
    "files": [
     "code/selection/if-statement.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT construct the first line of an if statement",
   "tokens": {
    "blank": [
     "if",
     ":"
    ],
    "text": [
     "```python\n",
     0,
     " num > 100",
     0,
     "\n        print(\"num is greater than 100\")\n```"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3776588336",
  "source": {
   "name": "if else syntax reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat are the requirements of using an `else` statement? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ce4a5aea-41fc-29aa-611d-a6ba0cf471e0",
     "correct": true,
     "answer": "There is no indentation"
    },
    {
     "_id": "817234b7-ee3f-0842-b52d-9405ae6a4cfa",
     "correct": true,
     "answer": "Use a `:` at the end"
    },
    {
     "_id": "382044fa-4cef-171d-8a8b-6e41d152400d",
     "correct": true,
     "answer": "Do not use another boolean expression"
    },
    {
     "_id": "81f3ca45-bbfe-2757-1011-6f1a4ca11174",
     "correct": true,
     "answer": "Code after the `else` must be indented"
    }
   ],
   "guidance": "All of the statements are true:\n* `else` should not be indented, i.e. it is aligned with the preceding `if` statement\n* Use a `:` after `else`\n* You do not declare another boolean expression\n* All code that runs if the boolean expression is false should be indented",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else syntax"
     }
    ],
    "files": [
     "code/selection/if-else-statement-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-else-statement-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the syntax of an if else statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2713895980",
  "source": {
   "name": "if else reading question",
   "showName": false,
   "instructions": "## Reading Question\nPlace the following code blocks in their proper place.",
   "initial": "if 10 < 7:\n  print(\"10 is less than 7\")\nelse:\n  print(\"10 is not less than 7\")",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "The if statement comes first. Of the two print statements, the one that prints `10 is less than 7` comes first. Then comes the else statement. Finally, the statement that prints `10 is not less than 7` comes last.\n\n```python\nif 10 < 7:\n    print(\"10 is less than 7\")\nelse:\n    print(\"10 is not less than 7\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/selection/if-else-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/if-else-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT understand the order of if else statements"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3628765968",
  "source": {
   "name": "Formative assessment 1 if else statement",
   "showName": false,
   "instructions": "## Debug the Code\nWhat is wrong with the code below? **Hint**, there is more than one right answer.\n\n```python\nif 3 > 4\nprint(\"This is true\")\nelse\nprint(\"This is false\")\n```",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "0a882f4e-161b-79d9-c1cc-d64ebc600e5e",
     "correct": false,
     "answer": "There needs to be parentheses around the boolean expression"
    },
    {
     "_id": "8f5a52ab-2dc0-d360-0a71-e946567c1adb",
     "correct": true,
     "answer": "There needs to be a `:` after the if statement and the else"
    },
    {
     "_id": "252fa73d-2122-6f43-c1b6-081fde8368ac",
     "correct": true,
     "answer": "The print statements need to be indented"
    },
    {
     "_id": "f4a19333-2152-f731-f648-27b31f7c7f6f",
     "correct": false,
     "answer": "There needs to be a variable in the boolean expression"
    }
   ],
   "guidance": "A `:` should be used after the boolean expression and after the `else`. The print statements should be indented because they are to be run if the boolean expression is true (the first print statement) or false (the second print statement).\n\n```python\nif 3 > 4:\n    print(\"This is true\")\nelse:\n    print(\"This is false\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct an if else statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1573332278",
  "source": {
   "name": "elif syntax reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following `elif` statements is correct?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2be02c67-04df-db32-be6d-7617db6ffa3b",
     "correct": false,
     "answer": "`elif:`"
    },
    {
     "_id": "251bb5fc-5dc0-b4a9-154f-50dc2eb5f6a3",
     "correct": false,
     "answer": "`else if a < 10:`"
    },
    {
     "_id": "1c8847df-f40d-5a0c-44c8-d42ce4495a2e",
     "correct": true,
     "answer": "`elif a < 10:`"
    },
    {
     "_id": "36a614ca-33a3-78af-dc62-7eb54cf48c6a",
     "correct": false,
     "answer": "`elif a < 10`"
    }
   ],
   "guidance": "The `elif` statement is followed by a boolean expression and a `:`. That is why `elif a < 10:` is the correct answer.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statement"
     }
    ],
    "files": [
     "code/selection/elif-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/elif-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand syntax of the elif statement"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2639153112",
  "source": {
   "name": "elif efficiency reading question",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks of the passage below. Use the information above to help find the correct answers.",
   "text": "A series of elif statements can be more efficient that a series of if statements because the <<<elif>>> statements will <<<stop>>> as soon as there is a <<<true>>> boolean expression. The <<<if>>> statement, however, will keep going even if there is a <<<true>>> boolean expression.",
   "guidance": "A series of elif statements can be more efficient that a series of if statements because the **elif** statements will **stop** as soon as there is a **true** boolean expression. The **if** statement, however, will keep going even if there is a **true** boolean expression.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statement"
     }
    ],
    "files": [
     "code/selection/elif-efficiency.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/elif-efficiency.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand why elif statements can be more efficient",
   "tokens": {
    "blank": [
     "elif",
     "stop",
     "true",
     "if",
     "true"
    ],
    "text": [
     "A series of elif statements can be more efficient that a series of if statements because the ",
     0,
     " statements will ",
     0,
     " as soon as there is a ",
     0,
     " boolean expression. The ",
     0,
     " statement, however, will keep going even if there is a ",
     0,
     " boolean expression."
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3606655636",
  "source": {
   "name": "elif formative assessment",
   "showName": false,
   "instructions": "## Constructing an Elif Statement\nRearrange the code blocks below to build a proper elif statement.",
   "initial": "my_var = 7\nif my_var < 5:\n    print(\"Less than 5.\")\nelif my_var <= 10:\n    print(\"Between 5 and 10.\")\nelse:\n    print(\"Greater than 10.\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Start by declaring the variable. You cannot use a variable before creating it. Elif statements must have an if statement before it, so the if statement comes next. After that comes the elif statement. The else statement must come after the elif statement.\n\n```python\nmy_var = 7\nif my_var < 5:\n    print(\"Less than 5.\")\nelif my_var <= 10:\n    print(\"Between 5 and 10.\")\nelse:\n    print(\"Greater than 10.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditonals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statement"
     }
    ],
    "files": [
     "code/selection/elif-efficiency.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/elif-efficiency.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct an elif statement"
  }
 },
 {
  "type": "free-text-auto",
  "taskId": "free-text-auto-1329636127",
  "source": {
   "name": "stdin practice",
   "showName": false,
   "instructions": "## Convert If Statements to Elif Statements\nConvert the code below into a series of elif statements.\n\n```python\nif my_var == 1:\n    print(\"my_var is 1\")\nif my_var == 2:\n    print(\"my_var is 2\")\nif my_var == 3:\n    print(\"my_var is 3\")\nif my_var == 4:\n    print(\"my_var is 4\")\nif my_var == 5:\n    print(\"my_var is 5\")\n```",
   "command": "python3 .guides/secure/convert-if-to-elif.py",
   "timeoutSeconds": 40,
   "guidance": "Explanation",
   "showGuidanceAfterResponse": true,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "previewType": "RAW",
   "points": 1,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Free Text Autograde"
     }
    ],
    "files": [
     "code/selection/elif-efficiency.py"
    ],
    "opened": [
     {
      "type": "terminal",
      "panelNumber": 0,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-139432121",
  "source": {
   "name": "elif formative assessment 2",
   "showName": false,
   "instructions": "## Constructing an Elif Statement\nLook at the code below:\n\n```python\nif my_var < 1:\n    print(\"my_var is less than 1\")\nif my_var == 1:\n    print(\"my_var is 1\")\nif my_var > 1:\n    print(\"my_var is greater than 1\")\n```\n\nUse the code blocks to create an equivalent program that uses elif statements instead of if statement. **Hint**, you will not use all of the code blocks.",
   "initial": "if my_var < 1:\n    print(\"my_var is less than 1\")\nelif my_var == 1:\n    print(\"my_var is 1\")\nelse:\n    print(\"my_var is greater than 1\")\nelse my_var > 1:    #distractor\nelse if my_var == 1:    #distractor",
   "options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"trashId\":\"sortableTrash\"}",
   "grader": "1",
   "guidance": "All of the print statements are correct, so they can all be used. The `if` statement should be first, followed by the `elif` statement. `elif` is an abbreviation for `else if`, so the statemente with `else if` can be ignored. Finally, the program should end with `else`, which does not require a boolean expression.\n\n```python\nif my_var < 1:\n    print(\"my_var is less than 1\")\nelif my_var == 1:\n    print(\"my_var is 1\")\nelse:\n    print(\"my_var is greater than 1\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statements"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT create an elif statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2216399909",
  "source": {
   "name": "compound conditional reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhat is a compound conditional?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f36a55e0-e7ef-6e0b-682d-7559b22f96af",
     "correct": false,
     "answer": "Two conditional statements but with only the `and` operator."
    },
    {
     "_id": "991415dd-0e6b-2f5c-bb3d-f98335ce8668",
     "correct": false,
     "answer": "Two if statements, one after the other."
    },
    {
     "_id": "29575170-c626-9aea-e4f4-81e2a5714f5f",
     "correct": true,
     "answer": "A conditional that has two or more boolean expressions."
    },
    {
     "_id": "c595f1b9-7213-8643-e01b-bf4600f24c6e",
     "correct": false,
     "answer": "Two conditional statements but with only the `or` operator."
    }
   ],
   "guidance": "A compound conditional is a conditional (an if statement) with two or more boolean expressions. Either of the keywords `and` and `or` can be used to link the boolean expressions together.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/compound-conditional-syntax.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditional-syntax.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a compound conditional"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3946834266",
  "source": {
   "name": "compound conditional reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhy would you want to use a compound conditional? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "674fd320-8af5-c8e7-3235-d9b78bae83c9",
     "correct": true,
     "answer": "If two or more thing have to be true."
    },
    {
     "_id": "f9529a87-bc47-7241-d090-27a406419b5d",
     "correct": false,
     "answer": "When you want your code to be faster."
    },
    {
     "_id": "4cc65d8f-88bd-44c5-01e6-e67acf0ca9c5",
     "correct": false,
     "answer": "You will get an error message if you don't use a compound conditional."
    },
    {
     "_id": "93a5675c-240e-fa6b-fca4-7bceeb6d52e1",
     "correct": true,
     "answer": "When you want your code to be more concise and easy to read."
    }
   ],
   "guidance": "Compound conditionals allow you to test two or more things to be true, and they make your code more concise and easy to read.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/compound-conditionals.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditionals.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use compound conditionals"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3789781260",
  "source": {
   "name": "compound conditional assessment 1",
   "showName": false,
   "instructions": "## Compound Conditionals\nDrag the code blocks below to create a compound conditional that prints `Hello World`. **Hint**, not all of the code blocks will be used.",
   "initial": "if True or True:\n    print(\"Hello World\")\nif True: #distractor\nif True not True: #distractor\nif not True: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "A compound conditional requires two boolean expressions joined by either `and` or `or`. \n\n```python\nif True or True:\n    print(\"Hello World\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditional"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditional"
     }
    ],
    "files": [
     "code/selection/compound-conditionals.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditionals.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a compound conditional"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-888446590",
  "source": {
   "name": "compound conditional assessment 2",
   "showName": false,
   "instructions": "## Compound Conditionals\n```python\nif x > 5:\n    if x < 20:\n        print(x)\n```\nUse the code blocks to convert the code above into a compound conditional. **Hint**, not all of the code blocks will be used.",
   "initial": "if x > 5 and x < 20:\n    print(x)\nif x < 5 and x > 20: #distractor\nif x > 5 or x < 20: #distractor\nif x > 5 not x < 20: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "If `x > 5` is true, then you get to ask if `x < 20`. If that is true, then you get to `print(x)`. So x must be greater and 5 **and** less than 20.\n\n```python\nif x > 5 and x < 20:\n    print(x)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/compound-conditionals.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/compound-conditionals.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT converta a nested conditional  to a compound conditional"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-14693278",
  "source": {
   "name": "parsons sample",
   "showName": false,
   "instructions": "Parsons with executable code",
   "initial": "if x $$toggle::/::%::+$$ 2 == 0:\n    print(\"Even\")",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"vartests\": [{\"initcode\": \"x = 8\", \"code\": \"\", \"message\": \"Testing with initial variable values x = 0 and y = 2\", \"variables\": {\"x\": 2}}]\n}",
   "grader": "2",
   "guidance": "Blah",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": [
     {
      "type": "terminal",
      "panelNumber": 0,
      "content": ""
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1838402046",
  "source": {
   "name": "moths challenge (conditionals)",
   "showName": false,
   "instructions": "## Month of the Year\nYour program should handle a variable `month` that has a number value between 1 and 12. Print the month of the year based on this number (1 is January, etc.).\n\n**Remember**, do not declare the variable `month` in your code when you submit it. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/conditionals_lab_test.py",
   "preExecuteCommand": "",
   "guidance": "The simplest way to solve this problem is to make a series of 12 if-statements.\n\n```python\nif month == 1:\n  print(\"January\")\nif month == 2:\n  print(\"February\")\nif month == 3:\n  print(\"March\")\nif month == 4:\n  print(\"April\")\nif month == 5:\n  print(\"May\")\nif month == 6:\n  print(\"June\")\nif month == 7:\n  print(\"July\")\nif month == 8:\n  print(\"August\")\nif month == 9:\n  print(\"September\")\nif month == 10:\n  print(\"October\")\nif month == 11:\n  print(\"November\")\nif month == 12:\n  print(\"December\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "3",
     "input": "",
     "output": "March",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "12",
     "input": "",
     "output": "December",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "10",
     "input": "",
     "output": "October",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1",
     "input": "",
     "output": "January",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "11",
     "input": "",
     "output": "November",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "6",
     "input": "",
     "output": "June",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "8",
     "input": "",
     "output": "August",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     }
    ],
    "files": [
     "code/selection/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/lab_challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3257214820",
  "source": {
   "name": "self check conditionals definitions",
   "showName": false,
   "instructions": "## Self-Check Definitions\nThe sentences below are definitions for the different conditionals introduced this unit. Fill in the blanks with the appropriate conditional.",
   "text": "<<<If>>> statements only performs actions if the boolean expression is true. Nothing happens if it is false.\n\n<<<Compound conditional>>> statements test multiple boolean expressions at once. The expressions are linked together with `and` or `or`.\n\n<<<If else>>> statements checks to see if a boolean expression is true, and also allows for action if the expression is false.\n\n<<<If elif else>>> statements start with an if statement. They then have a series of boolean expressions. This conditional give you the most precision.",
   "guidance": "The if statement only performs an action if the boolean expression is true. Nothing is done if the expression is false.\n\nCompound conditionals are more than one boolean expression linked together with the keywords `and` or `or`.\n\nIf else statements perform a set of actions if the boolean expression is true. It performs another set of actions if the expression is false.\n\nIf elif else statements have a series of boolean expressions. A set of actions are performed if one of these expressions is true.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Comparing the 4 different types of conditionals"
     }
    ],
    "files": [
     "code/selection/lab_challenge.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between the different types of conditionals",
   "tokens": {
    "blank": [
     "If",
     "Compound conditional",
     "If else",
     "If elif else"
    ],
    "text": [
     0,
     " statements only performs actions if the boolean expression is true. Nothing happens if it is false.\n\n",
     0,
     " statements test multiple boolean expressions at once. The expressions are linked together with `and` or `or`.\n\n",
     0,
     " statements checks to see if a boolean expression is true, and also allows for action if the expression is false.\n\n",
     0,
     " statements start with an if statement. They then have a series of boolean expressions. This conditional give you the most precision."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-946441677",
  "source": {
   "name": "self-check compound conditionals",
   "showName": false,
   "instructions": "## Lab Question\n\nSelect all of the compound conditionals that are correctly written. **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "0c7b92fb-5f63-62d3-7568-aba822ce815c",
     "correct": true,
     "answer": "if True and False:"
    },
    {
     "_id": "57b7eb2f-0dc6-015c-4aeb-7cbedc54781f",
     "correct": false,
     "answer": "if False not True:"
    },
    {
     "_id": "fd309319-5f88-aead-31ca-fba624aad8b7",
     "correct": true,
     "answer": "if not False or True:"
    },
    {
     "_id": "440b6906-cd90-4ea0-0eb5-b83bc79a6dcb",
     "correct": false,
     "answer": "if True, True:"
    }
   ],
   "guidance": "`if True and False:` - This is a correct answer because the keyword `and` is connecting more than one boolean expression.\n\n`if False not True:` - This not a correct answer because the keyword `not` cannot connect boolean expressions.\n\n`if not False or True:` - This is a correct answer because the keyword `or` is connecting two boolean expressions. The keyword `not` can be used in addition to `and` and `or`, but not by itself.\n\n`if True, True:` - This is not a correct answer because commas are not used to link boolean expressions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditionals"
     }
    ],
    "files": [
     "code/selection/lab3.py",
     "code/selection/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/lab3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT properly construct a compound conditional"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2074845473",
  "source": {
   "name": "self-check if else",
   "showName": false,
   "instructions": "## Lab Question\n\nDrag the appropriate code blocks into the box below. Your program should check to see if a number is even and print \"Even\". If the number is odd, then print \"Odd\". Assume the variable `x` represents the number to be tested.",
   "initial": "if x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\nif x % 2 = 0 #distractor\nif x // 2 == 0: #distractor\nelif: #distractor\nelse #distractor\nprint(Even) #distractor\nprint(Odd) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here is the correct answer:\n\n```python\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")\n```\n\nHere is why the other options are incorrect:\n\n* `if x % 2 = 0` - The equality operator (`==`) is not used.\n* `if x // 2 == 0` - The `//` operator is floor division. To be even, there can be no remainder. The modulo operator (`%`) must be used instead.\n* `elif:` - First, `elif` required a boolean expression. Since a number can be either even or odd, `else:` is the better choice.\n* `else` - The `:` is missing.\n* `print(Even)` - The quotation marks are missing. Without them, Python will try to print the variable `Even`, which has not been declared. \n* `print(Odd)` - The quotation marks are missing. Without them, Python will try to print the variable `Odd`, which has not been declared. ",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/selection/lab2.py",
     "code/selection/lab_challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/lab2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT construct an if else statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3649559415",
  "source": {
   "name": "self check conditionals if",
   "showName": false,
   "instructions": "## Lab Question\n\nSelect all of the statements below that are true with regards to if statements. **Hint**, there is more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ae9339af-fb42-8d8e-417c-fb46b58232bf",
     "correct": true,
     "answer": "If statements only ask if a boolean expression is true."
    },
    {
     "_id": "3acea470-c092-f47c-fa6f-d2e9cda607a7",
     "correct": false,
     "answer": "If statements will perform a set of actions  if the boolean expression is false."
    },
    {
     "_id": "2aefb536-6703-74bd-6e97-314c0d90dd7b",
     "correct": false,
     "answer": "If statements provide the most precision of all the conditional statements."
    },
    {
     "_id": "279c31cc-b47f-1756-d5ef-c97da61a6514",
     "correct": true,
     "answer": "If statements are the simplest of all the conditionals."
    }
   ],
   "guidance": "The correct answers are:\n\n```\nIf statements only ask if a boolean expression is true.\n\nIf statements are the simplest of all the conditionals.\n```\n\nIf statements can only ask if a boolean expression is true. An else statement takes into account a false boolean expression.\n\nIf statements are the simplest because they ignore when a boolean expression is false, and they do not ask subsequent boolean expressions.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Pyh"
     },
     {
      "name": "Category",
      "value": "If statement"
     }
    ],
    "files": [
     "code/selection/lab1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/lab1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the characteristics of an if statement"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3355268222",
  "source": {
   "name": "self check conditionals elif",
   "showName": false,
   "instructions": "## Lab Question\n\nImagine that the variable `x` contains a number between 0 and 20. Rearrange the code blocks below to create  a program that see if `x` is between 0 and 5, 5 to 10, 10 to 15, or between 15 and 20.",
   "initial": "if x <= 5:\n    print(\"x is between 0 and 5\")\nelif x <= 10:\n    print(\"x is between 5 and 10\")\nelif x <= 15:\n    print(\"x is between 10 and 15\")\nelse:\n    print(\"x is between 15 and 20\")",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "",
   "guidance": "```python\nif x <= 5:\n    print(\"x is between 0 and 5\")\nelif x <= 10:\n    print(\"x is between 5 and 10\")\nelif x <= 15:\n    print(\"x is between 10 and 15\")\nelse:\n    print(\"x is between 15 and 20\")\n```\n\nThe order of the code is important. If the order were different, you could get a false positive. Take a look at the code below:\n\n```python\nx = 8\n\nif x <= 5:\n    print(\"x is between 0 and 5\")\nelif x <= 15:\n    print(\"x is between 10 and 15\")\nelif x <= 10:\n    print(\"x is between 5 and 10\")\nelse:\n    print(\"x is between 15 and 20\")\n```\n\nThe incorrect code would print `x is between 10 and 15` even though that is not true. The boolean expressions should go in ascending order.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Elif statements"
     }
    ],
    "files": [
     "code/selection/lab4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/lab4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize that order is important with elif statements"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2805811716",
  "source": {
   "name": "conditionals exercise 1",
   "showName": false,
   "instructions": "Submit your code to be evaluated when ready. **Remember**, do not edit the code on lines 5 and 6.",
   "command": "python3 .guides/secure/conditionals_exercise_1_test.py",
   "preExecuteCommand": "",
   "guidance": "Since you are testing if `x` is between two ranges, you need a compound conditional. Also, `x` can fall into either of the ranges, so use the `or` keyword to connect the two boolean expressions. Nothing is to be done if the compound conditional is false, so you do not need to use an `else` or `elif`. Here is one solution to the problem:\n\n```python\nif x > 0 and x < 25 or x > 75 and x < 100:\n    print(str(x) + \" is between 0 and 25 or 75 and 100\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "17",
     "input": "",
     "output": "17 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "93",
     "input": "",
     "output": "93 is between 0 and 25 or 75 and 100",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "50",
     "input": "",
     "output": "",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound onditionals"
     }
    ],
    "files": [
     "code/selection/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to code a compound conditional"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2165783626",
  "source": {
   "name": "conditionals exercise 2",
   "showName": false,
   "instructions": "Submit your code to be evaluated when ready. **Remember**, do not edit the code on lines 5 and 6.",
   "command": "python3 .guides/secure/conditionals_exercise_2_test.py",
   "preExecuteCommand": "",
   "guidance": "The question is asking a single question, is `x` divisible by 5? You do not need a compound conditional. Since you have to print two separate messages (one for true, the other for false), you will need to use `else`. There are no more questions about `x`, so you do not need to use `elif` Here is a possible solution:\n\n```python\nif x % 5 == 0:\n    print(str(x) + \" is divisible by 5\")\nelse:\n    print(str(x) + \" is not divisible by 5\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "5",
     "input": "",
     "output": "5 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "550",
     "input": "",
     "output": "550 is divisible by 5",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "17",
     "input": "",
     "output": "17 is not divisible by 5",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else statement"
     }
    ],
    "files": [
     "code/selection/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to code an if else conditional"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-662068084",
  "source": {
   "name": "conditionals exercise 3",
   "showName": false,
   "instructions": "Submit your code to be evaluated when ready. **Remember**, do not edit the code on lines 5 and 6.",
   "command": "python3 .guides/secure/conditionals_exercise_3_test.py",
   "preExecuteCommand": "",
   "guidance": "Two things have to be true (divisible by 5 and even), so you need to use a compound conditional. Since both of these need to be true, use the `and` keyword to connect the boolean expressions. You will also need to print a message if the compound conditional is false, so use the `else` keyword. There are no more questions so do not use `elif`. Here is one possible solution:\n\n```python\nif x % 5 == 0 and x % 2 == 0:\n    print(str(x) + \" is divisible by 5 and even\")\nelse:\n    print(str(x) + \" is not divisible by 5 or it is odd\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "10",
     "input": "",
     "output": "10 is divisible by 5 and even",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "25",
     "input": "",
     "output": "25 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "7",
     "input": "",
     "output": "7 is not divisible by 5 or it is odd",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditional, if else statement"
     }
    ],
    "files": [
     "code/selection/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT code a compound conditional with an else statement"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3603717044",
  "source": {
   "name": "conditionals exercise 4",
   "showName": false,
   "instructions": "Submit your code to be evaluated when ready. **Remember**, do not edit the code on lines 5 and 6.",
   "command": "python3 .guides/secure/conditionals_exercise_4_test.py",
   "preExecuteCommand": "",
   "guidance": "The problem states that you have to use an `elif` statement. You also do not need a compound conditional because of the `elif`. Here is one possible solution:\n\n```python\nif x == \"red\":\n    print(x + \" is a primary color\")\nelif x == \"blue\":\n    print(x + \" is a primary color\")\nelif x == \"yellow\":\n    print(x + \" is a primary color\")\nelse:\n    print(x + \" is not a primary color\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "red",
     "input": "",
     "output": "red is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "yellow",
     "input": "",
     "output": "yellow is a primary color",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "black",
     "input": "",
     "output": "black is not a primary color",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "if elif else statement"
     }
    ],
    "files": [
     "code/selection/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT code a conditional with elif"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3156139445",
  "source": {
   "name": "conditionals exercise 5",
   "showName": false,
   "instructions": "Submit your code to be evaluated when ready. **Remember**, do not edit the code on lines 5 and 6.",
   "command": "python3 .guides/secure/conditionals_exercise_5_test.py",
   "preExecuteCommand": "",
   "guidance": "The problem does not specify how to code the solution. Like Exercise 4, you can use a series of `elif` statements to determine if `x` is a vowel. It is also possible to use a long compound conditional. Here is one possible solution:\n\n```python\nif x == \"a\" or x == \"e\" or x ==\"i\" or x == \"o\" or x == \"u\":\n    print(x + \" is a vowel\")\nelse:\n    print(x + \" is not a vowel\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "arePartialPointsAllowed": false,
   "sequence": [
    {
     "arguments": "e",
     "input": "",
     "output": "e is a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "f",
     "input": "",
     "output": "f is not a vowel",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "i",
     "input": "",
     "output": "i is a vowel",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Compound conditiona, elif statement"
     }
    ],
    "files": [
     "code/selection/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a conditional comparing strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3464309383",
  "source": {
   "name": "reading question list basics",
   "showName": false,
   "instructions": "## Reading Question\nSelect the code snippet that correctly declares the variable `my_list` as a list with the elements `1`, `2`, and `3`.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2699ee10-cf57-cea8-4327-011fe8a74bc8",
     "correct": false,
     "answer": "`my_list = (1, 2, 3)`"
    },
    {
     "_id": "65e5fa1c-7b27-151d-6852-e07eaf4b671a",
     "correct": false,
     "answer": "`my_list = {1, 2, 3}`"
    },
    {
     "_id": "4f54cae4-d5a6-b258-6e47-599ad3e9a4ec",
     "correct": false,
     "answer": "`my_list = [1 2 3]`"
    },
    {
     "_id": "8d815c2c-315b-6362-49ff-e9c3d63a07f6",
     "correct": true,
     "answer": "`my_list = [1, 2, 3]`"
    }
   ],
   "guidance": "Lists in Python are created with the `[]` brackets and each element is separated with a comma.\n\n```python\nmy_list = [1, 2, 3]\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List declaration"
     }
    ],
    "files": [
     "code/lists/list-basics.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-basics.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT to declare a list"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-853377932",
  "source": {
   "name": "reading question list operators",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks for the following sentences.",
   "text": "The assignment operator (`=`) <<<modifies>>> the original list.\n\nThe slice operator (`:`) <<<does not modify>>> the original list.",
   "guidance": "```\nThe assignment operator (`=`) modifies the original list.\n```\n The assignment operator does not return a new list. It modifies the original list.\n\n```\nThe slice operator (`:`) does not modify the original list.\n```\n\nThe slice operator does return a new list. It does not modify the original list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List operators"
     }
    ],
    "files": [
     "code/lists/list-operators.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-operators.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how slice and the assignment operator affects the original list",
   "tokens": {
    "blank": [
     "modifies",
     "does not modify"
    ],
    "text": [
     "The assignment operator (`=`) ",
     0,
     " the original list.\n\nThe slice operator (`:`) ",
     0,
     " the original list."
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2442920593",
  "source": {
   "name": "reading question list indecies",
   "showName": false,
   "instructions": "## Reading Question\nUse the list below to answer the following questions.\n\n```python\nmy_list = [32, 17, 89, 16, 5]\n```",
   "text": "The value of `my_list[1]` is <<<17>>>.\n\nThe value of `my_list[4]` is <<<5>>>.",
   "guidance": "Start counting with 0 when determining the index. So `my_list[1]` is `17` and `my_list[4]` is `5`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "List"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List index"
     }
    ],
    "files": [
     "code/lists/list-basics-2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-basics-2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT the proper index in a list",
   "tokens": {
    "blank": [
     "17",
     "5"
    ],
    "text": [
     "The value of `my_list[1]` is ",
     0,
     ".\n\nThe value of `my_list[4]` is ",
     0,
     "."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-962382299",
  "source": {
   "name": "list basics formative assessment 1",
   "showName": false,
   "instructions": "## List Index\nUsing the list below, select the code snippet that references the third element in the array.\n\n```python\nmy_list = [1, 2, 3, 4, 5]\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6c8dd49e-6705-ce47-a5bd-a980c68dfff2",
     "correct": false,
     "answer": "`my_list[3]`"
    },
    {
     "_id": "ffa5f2d6-89c6-9c61-6d01-a89ec5285491",
     "correct": true,
     "answer": "`my_list[2]`"
    },
    {
     "_id": "933c6577-046c-db23-01dd-3620adbfd9d1",
     "correct": false,
     "answer": "3"
    },
    {
     "_id": "79a0357c-b82b-23f8-472a-400179edb1db",
     "correct": false,
     "answer": "`my_list[third]`"
    }
   ],
   "guidance": "The index of a list starts with 0. So we count 0, 1, 2. Index 2 represents the third element. When writing this in code, start with the list's name, square brackets, and the index in between the brackets.\n\n```\nmy_list[2]\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List index"
     }
    ],
    "files": [
     "code/lists/list-basics-2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-basics-2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT reference an element in a list with an index"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1857560190",
  "source": {
   "name": "formative assessment list basics 2",
   "showName": false,
   "instructions": "## Modifying a List\nEdit the list `my_list` so that it contains the elements `\"red\"`, `\"green\"`, and `\"blue\"` in that order.",
   "initial": "my_list[0] = \"red\"\nmy_list[1] = \"green\"\nmy_list[2] = \"blue\"\n",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"vartests\": {\"initcode\": \"my_list = [1, 2, 3]\", \"code\": \"\", \"message\": \"Checking your work\", \"variables\": {\"my_list\": [\"red\", \"green\", \"blue\"]}},\n  \"lang\":\"en\"\n}",
   "grader": "1",
   "guidance": "The key to solving this problem is to remember that the index starts with 0. Since `\"red\"` needs to the first element, use `my_list[0] = \"red\"`. The second element is `\"green\"`, so use `my_list[1] = \"green\"`. Finally, `\"blue\"` is the third element. Use `my_list[2] = \"blue\"`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List index, modify element"
     }
    ],
    "files": [
     "code/lists/list-basics-2.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT modify the value of list elements"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-760334949",
  "source": {
   "name": "test",
   "showName": true,
   "instructions": "test",
   "initial": "my_list[0] = \"red\"\nmy_list[1] = \"green\"\nmy_list[2] = \"blue\"",
   "options": "{\n \"sortableId\": \"sortable\",\n \"trashId\": \"sortableTrash\",\n \"vartests\": {\"initcode\": \"my_list = [1, 2, 3]\", \"code\": \"\", \"message\": \"Checking your work\", \"variables\": {\"my_list[0]\":\"red\", \"my_list[1]\":\"green\", \"my_list[2]\":\"blue\"}},\n \"lang\":\"en\"\n}",
   "grader": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4059727614",
  "source": {
   "name": "reading question list concatenation",
   "showName": false,
   "instructions": "## Reading Question\nWhat data types are used with the list concatenation operator (`+`)?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "3bb1b4a3-69ef-9da2-fdf2-5e616bd00db8",
     "correct": false,
     "answer": "The list concatenation operator requires a list and a string."
    },
    {
     "_id": "6551f611-a64b-440c-cb7a-dac25ffb64fb",
     "correct": false,
     "answer": "The list concatenation operator requires a list and a number."
    },
    {
     "_id": "d00b4308-df84-1e14-55d2-72215394b48f",
     "correct": true,
     "answer": "The list concatenation operator requires two lists."
    },
    {
     "_id": "d35b3611-581f-e6ef-839c-f965ca226a39",
     "correct": false,
     "answer": "The list concatenation operator requires a list and a boolean."
    }
   ],
   "guidance": "Only a list can be concatenated to a list. Trying to use any other data type will cause an error message.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Concatenation"
     }
    ],
    "files": [
     "code/lists/list-concat.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-concat.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT concatenate two lists"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-592043842",
  "source": {
   "name": "reading question list repetition",
   "showName": false,
   "instructions": "## Reading Question\nSelect the appropriate code blocks that will create the list:\n\n```python\n['Hello', 'Hello', 'Hello']\n```\n**Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [\"Hello\"]\nprint(my_list * 3)\nmy_list = (\"Hello\") #distractor\nprint(my_list x 3) #distractor\nprint(my_list + 3) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List repetition"
     }
    ],
    "files": [
     "code/lists/list-repeat.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-repeat.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT repeat a list with the * operator"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-622392417",
  "source": {
   "name": "reading question in operator lists",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to complete the sentence about the `in` operator.",
   "text": "The `in` operator returns a <<<boolean>>> value.",
   "guidance": "The `in` operator returns a **boolean** value, which means either **true** or **false**.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "In operator, lists"
     }
    ],
    "files": [
     "code/lists/list-in.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-in.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the return value of the in operator",
   "tokens": {
    "blank": [
     "boolean"
    ],
    "text": [
     "The `in` operator returns a ",
     0,
     " value."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1182301890",
  "source": {
   "name": "reading question list length",
   "showName": false,
   "instructions": "## Reading Question\nWhat is the relationship of the length of a list and the value of its last index?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "2f5b5d7e-916d-679c-0f69-8d4d5299ec8b",
     "correct": true,
     "answer": "The length of a list is always 1 greater than the value of the last index."
    },
    {
     "_id": "7397b5b4-e78d-4e3b-f01f-691da82278fd",
     "correct": false,
     "answer": "The value of the length is equal to the value of the last index."
    },
    {
     "_id": "43316445-2692-ab9a-81b6-53533f80139f",
     "correct": false,
     "answer": "The value of the last index is 1 greater than the length."
    }
   ],
   "guidance": "Because you start counting at 0 for the index, it is always 1 smaller than the length of a list. For example, a list with the length of 4 will have 3 as the last index.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Length"
     }
    ],
    "files": [
     "code/lists/list-length.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-length.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand the difference between the length of a list and its last index"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2278057412",
  "source": {
   "name": "reading question lists slice",
   "showName": false,
   "instructions": "## Reading Question\nChoose the correct list and select the correct values for the slice operator so that you will have a list of:\n\n```\n[98, 10, 1]\n```",
   "initial": "my_list = [32, 98, 10, 1, 77]\nmy_list[1:4]\nmy_list[98, 32, 10, 1, 77] #distractor\nmy_list[32, 98, 10, 77, 1] #distractor\nmy_list[0:3] #distractor\nmy_list[1:3] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "1",
   "guidance": "The first step is to define the list. The slice operator returns consecutive elements in a list. That means you need a list with `98, 10, 1` in that order. So the list should be `my_list = [32, 89, 10, 1, 77]`. Next is to select the proper slice command. The slice operator includes the first number, but does not include the second number. Since we want elements 1, 2, and 3 from `my_list`, the slice command should be `my_list[1:4]`.\n\n```python\nmy_list[32, 98, 10, 1, 77]\nmy_list[1:4]\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/lists/list-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2706687738",
  "source": {
   "name": "list operators assessemtn 1",
   "showName": false,
   "instructions": "## Which Operator?\nWhich operator will tell if a list contains a certain value?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "d9f4a5a0-773b-6069-ebb0-d305a5e6aad8",
     "correct": false,
     "answer": "The `len` function"
    },
    {
     "_id": "df182e62-4198-61cd-b46c-bbd0d3e7ccd5",
     "correct": false,
     "answer": "The concatenation (`+`) operator"
    },
    {
     "_id": "bc8d3c6e-a11a-f2c5-5b0a-8f8f3fad03f1",
     "correct": false,
     "answer": "The slice (`:`) operator"
    },
    {
     "_id": "6a861429-1fab-b866-4d9b-0ccef4b0e54d",
     "correct": true,
     "answer": "The `in` operator"
    }
   ],
   "guidance": "To see if a value is an element of a list, use the `in` operator.\n\nThe 'len' function tells you the length of a list. The concatenation operator appends one list to another. Finally, the slice operator returns a subset of a list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "in operator, list operators"
     }
    ],
    "files": [
     "code/lists/list-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate what each of the operators do"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2772542203",
  "source": {
   "name": "list operators assessment 2",
   "showName": false,
   "instructions": "## List Operators\nDrag the appropriate blocks and place them in the correct order. Your program should do the following things:\n\n* Check to see if the length of `list_1` is an element of `list_2`\n* If yes, print `yes`\n* If no, print `no`\n\n**Hint**, you will not use all of the blocks.",
   "initial": "if len(list_1) in list_2:\n    print(\"yes)\nelse:\n    print(\"no\")\nelif: #distractor\nif length(list_1) in list_2: #distractor\nif len(list_1) on list_2: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Use `len` to check the length of a list. Use `in` to see if a value is an element of a list. Use `else` since there is only question to answer. Putting this together, you get:\n\n```python\nif len(list_1) in list_2:\n    print(\"yes)\nelse:\n    print(\"no\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     }
    ],
    "files": [
     "code/lists/list-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use in and len "
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1778093803",
  "source": {
   "name": "list append reading question",
   "showName": false,
   "instructions": "## Reading Question\nWhich of the following code snippets is the correct way to append `red` to the list `colors`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1d522dee-ce1a-6136-66ba-d94a60fec6dc",
     "correct": false,
     "answer": "`my_list.append(\"red\")`"
    },
    {
     "_id": "ce698671-62a3-a2ea-631f-05d9cbf37960",
     "correct": true,
     "answer": "`colors.append(\"red\")`"
    },
    {
     "_id": "cb34396a-23cc-796d-4a77-4ac5747563de",
     "correct": false,
     "answer": "`colors[append(\"red\")]`"
    },
    {
     "_id": "5794c6bd-83f4-258e-de22-d86eec821c04",
     "correct": false,
     "answer": "`colors,append(\"red\")`"
    }
   ],
   "guidance": "The pattern for using a list method is:\n\nlist name + period + method + parameters\n\nThe answer is: `colors.append(\"red\")`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Methods, append"
     }
    ],
    "files": [
     "code/lists/list-append.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-append.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the append method for lists"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2033383199",
  "source": {
   "name": "reading question pop list method",
   "showName": false,
   "instructions": "## Reading Question\nRearrange the code blocks below to create a loop that creates the following output:\n\n```python\n[1, 2, 3, 4]\n[1, 2, 3]\n[1, 2]\n[1]\n```\n**Hint**, you will not use all of the blocks.",
   "initial": "my_list = [1, 2, 3, 4]\nfor i in range(4):\n    print(my_list)\n    my_list.pop()\npop(my_list) #distractor\npop,my_list() #distractor\npop.my_list[] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "1) Declare the variable, `my_list`. \n2) Create the loop that runs four times. It has to run four times because there are four lines of output.\n3) Print `my_list`. If the `pop` statement comes first, then the first line of output would be `[1, 2, 3]`. This does not match the output in the problem.\n4) Pop off the last element of the list.\n\n```python\nmy_list = [1, 2, 3, 4]\nfor i in range(4):\n    print(my_list)\n    my_list.pop()\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Pop method"
     }
    ],
    "files": [
     "code/lists/list-pop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-pop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the pop method inside a loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3805979875",
  "source": {
   "name": "reading question list insert",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below so that the string `\"brown\"` will become the fourth element of the list `colors`.",
   "text": "`colors.insert(<<<3>>>, <<<\"brown\">>>)`",
   "guidance": "The `insert` method always starts with the index. Since the new object should appear fourth, the index is 3 (indexes start counting with 0). The object to be inserted is the string `\"brown\"`\n\n```python\ncolors.insert(3, \"brown\")\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Insert method"
     }
    ],
    "files": [
     "code/lists/list-insert.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-insert.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT insert an object into a list",
   "tokens": {
    "blank": [
     "3",
     "\"brown\""
    ],
    "text": [
     "`colors.insert(",
     0,
     ", ",
     0,
     ")`"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4061005599",
  "source": {
   "name": "reading question lists remove method",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of reasons why you would want to use the `remove` method. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "ec2c9a8f-dea9-9aaa-ac98-6569d0af7b1d",
     "correct": true,
     "answer": "You want to remove an element from a list"
    },
    {
     "_id": "25eb6abf-836d-4641-513e-f9cab617a329",
     "correct": false,
     "answer": "You want to have access to the element that was removed from the list"
    },
    {
     "_id": "c052529a-c80d-19c5-7ac6-7fb5faa894dd",
     "correct": true,
     "answer": "You want to remove an element by its value, not its index"
    }
   ],
   "guidance": "All of the options are reasons to use the `remove` method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Remove method"
     }
    ],
    "files": [
     "code/lists/list-remove.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-remove.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand why to use the remove method"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3051307281",
  "source": {
   "name": "reading question count method",
   "showName": false,
   "instructions": "## Reading Question\nDrag the appropriate code blocks to the box below. Your program should print the string \"It appeared more than three times.\" **Hint**, you will not use all of the code blocks, and declaring `my_list` should come first.",
   "initial": "my_list = [2, 4, 4.0, 6, 16/4, 12 % 5, 2.0, 4 * 0.5]\nx = my_list.count(2)\nif x > 3:\n    print(\"It appeared more than three times.\")\nx = my_list.count(4) #distractor\nx = list.count(2) #distractor\nx = my_list.count(\"2\") #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Declaring the variable `my_list` is the first step. The next step is to determine the value of `x`. `x = my_list.count(\"2\")` can be discarded because the string `\"2\"` does not appear in `my_list`. `x = list.count(2)` can be discarded because there is no variable named `list` (`list` is also a keyword, you can't use it for a variable name). Finally, `x = my_list.count(4)` can be discarded because this returns `3` which is not greater than `3`. So the string would not print to the screen. That leaves `x = my_list.count(2)` as the correct answer.\n\n```python\nmy_list = [2, 4, 4.0, 6, 16/4, 12 % 5, 2.0, 4 * 0.5]\nx = my_list.count(2)\nif x > 3:\n    print(\"It appeared more than three times.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Count method"
     }
    ],
    "files": [
     "code/lists/list-count.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-count.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the count method in a conditional"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3349955060",
  "source": {
   "name": "reading question index method",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank below so that the code snippet returns the string `4`.",
   "text": "my_list = [flower, 3, True, 16.4, \"flower\", 32]\nmy_list.index(<<<\"flower\">>>)",
   "guidance": "The answer is not `flower` because that would return index 0. The string \"flower\" is located at index 4. So `my_list.index(\"flower\")`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Index method"
     }
    ],
    "files": [
     "code/lists/list-index.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-index.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use index to find a particular element in a list",
   "tokens": {
    "blank": [
     "\"flower\""
    ],
    "text": [
     "my_list = [flower, 3, True, 16.4, \"flower\", 32]\nmy_list.index(",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1411581104",
  "source": {
   "name": "reading question list sort",
   "showName": false,
   "instructions": "## Reading Question\nSelect all of the statements that are true about the `sort` method. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "cded748f-68ee-e71d-2803-9063cd0d7361",
     "correct": true,
     "answer": "The `sort` method can sort a list with mixed datatypes (i.e. floats, ints, strings, etc.)"
    },
    {
     "_id": "173584f7-ad4e-b871-f33a-1decfe00984c",
     "correct": false,
     "answer": "The `sort` method can only sort numbers"
    },
    {
     "_id": "588d723c-a360-8df6-f37f-320bab544789",
     "correct": true,
     "answer": "The `sort` method can sort lists in ascending and descending order"
    },
    {
     "_id": "7a9484ed-1413-9d58-e38e-75856f80593b",
     "correct": false,
     "answer": "The `sort` method returns a new list"
    }
   ],
   "guidance": "The correct answers are:\n\n* The `sort` method can sort a list with mixed datatypes (i.e. floats, ints, strings, etc.)\n* The `sort` method can sort lists in ascending and descending order\n\nThe `sort` method works with lists that have datatypes other than numbers. The `sort` method does not return a new list. It modifies the original list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Sort method"
     }
    ],
    "files": [
     "code/lists/list-sort.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-sort.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand what the sort method can do"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2518298496",
  "source": {
   "name": "reading question reverse method",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blank with the result of performing the `reverse` method on the list `my_list`.\n\n**Important**, put spaces between each element in the new list. It will be counted as wrong if not.",
   "text": "```python\nmy_list = [\"hat\", 421, 37.2, False, \"zebra\"]\n```\nThe new value of `my_list` is:\n[<<<\"zebra\", False, 37.2, 421, \"hat\">>>]",
   "guidance": "The correct answer is:\n[\"zebra\", False, 37.2, 421, \"hat\"]\n",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method"
     }
    ],
    "files": [
     "code/lists/list-reverse.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-reverse.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT reverse a list",
   "tokens": {
    "blank": [
     "\"zebra\", False, 37.2, 421, \"hat\""
    ],
    "text": [
     "```python\nmy_list = [\"hat\", 421, 37.2, False, \"zebra\"]\n```\nThe new value of `my_list` is:\n[",
     0,
     "]"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1820692199",
  "source": {
   "name": "Formative assessment 1 list methods",
   "showName": false,
   "instructions": "## List Methods\nDrag the appropriate code blocks to the box below. Your program should print a list that looks like this:\n\n`[\"Python\", \"List\", \"Methods\"]`\n\n**Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [\"DELETE ME\", \"Python\", \"List\", \"Methods\"]\nmy_list.remove(\"DELETE ME\")\nprint(my_list)\nmy_list.pop() #distractor\nmy_list.remove(0) #distractor\nmy_list.pop(\"DELETE ME\") #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "The difference between `pop` and `remove` is that `remove` searches for the object to remove. `pop` searches for an index and then removes the element at that index. `pop` also returns the element removed from the list.\n\nWhen dealing with an unsorted list, using `remove` is easier than using `pop`. ",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Remove method"
     }
    ],
    "files": [
     "code/lists/list-reverse.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT differentiate the usage between pop and remove"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2068019503",
  "source": {
   "name": "formative assessment 2 list methods",
   "showName": false,
   "instructions": "## List Methods\nDrag the appropriate code blocks to the box below. Your program should print a list that looks like this:\n\n`[\"Python\", \"List\", \"Methods\"]`\n\n**Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [\"Methods\", \"Python\"]\nmy_list.reverse()\nmy_list.insert(1, \"List\")\nprint(my_list)\nmy_list.sort() #distractor\nmy_list.insert(\"List\", 1) #distractor\nmy_list.append(\"List\") #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here are the steps needed to print the correct list:\n\n1) Declare the list\n2) Sort the list to make `\"Python\"` the first element in the list\n3) Insert the string `\"List\"` into `my_list`. Remember, the `insert` method takes two parameters. The first one is the index to be used, and the second is the object to add to the list.\n4) Print the newly modified list\n\n```python\nmy_list = [\"Methods\", \"Python\"]\nmy_list.reverse()\nmy_list.insert(1, \"List\")\nprint(my_list)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method, insert method"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use the reverse and insert methods to modify a list"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3133020826",
  "source": {
   "name": "reading question sum function",
   "showName": false,
   "instructions": "Drag the appropriate code blocks to the box below. Your program should calculate the average value of a list of numbers.",
   "initial": "my_list = [5, 17, 2, 3, 3]\ntotal = sum(my_list)\nnum_elements = len(my_list)\navg = total / num_elements\nprint(avg)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\",\n  \"vartests\": [{\"initcode\": \"avg = 0\",\n                \"code\": \"\",\n                \"message\": \"Testing...\",\n                \"variables\": {\"avg\": 6}\n               }\n              ],\n  \"executable_code\": \"my_list = [5, 17, 2, 3, 3]\\ntotal = sum(my_list)\\nnum_elements = len(my_list)\\navg = total / num_elements\\nprint(avg)\"\n}",
   "grader": "4",
   "guidance": "Here are the steps to solving the problem:\n1) Declare the variable `my_list`.\n2) Declare the variable `total` as the sum of `my_list`. This could also be done as step 3.\n3) Declare the variable `num_elemets` as the length of `my_list`. This could also be done as step 2.\n4) Declare `avg` and assign it the sum divided by the number of elements in the list.\n5) Print `avg`\n\n```python\nmy_list = [5, 17, 2, 3, 3]\ntotal = sum(my_list)\nnum_elements = len(my_list)\navg = total / num_elements\nprint(avg)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Sum function"
     }
    ],
    "files": [
     "code/lists/list-sum.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-sum.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use the sum function to help calculate the average of a list"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2224587180",
  "source": {
   "name": "reading question min function",
   "showName": false,
   "instructions": "## Reading Question\nDrag the appropriate code blocks to the box below. Select the a value for `my_var` so that the variable `smallest` has the same value as `my_var`.",
   "initial": "myVar = $$toggle::1::2::3$$\nmyList = [1.75, 4, my_var, 2, 5]\nsmallest = min(my_list)",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"vartests\": {\n    \"initcode\": \"\",\n    \"code\": \"\",\n    \"message\": \"Testing...\",\n    \"variables\": {\"smallest\": 1}\n  },\n  \"executable_code\": \"myVar = 1\\nmyList = [1.75, 4, 1, 2, 5]\\nsmallest = min(myList)\"\n}",
   "grader": "4",
   "guidance": "Only the value of `1` will cause",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     }
    ],
    "files": [
     "code/lists/list-min.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-min.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-643226606",
  "source": {
   "name": "min function reading question",
   "showName": false,
   "instructions": "## Reading Question\nImagine that you have a list that has all of the golf scores for you and your friends. In which scenario would you use the `min` function?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "bd247410-ca67-76b2-9d43-243f90e11651",
     "correct": false,
     "answer": "To find out who had the highest score"
    },
    {
     "_id": "b74223ab-acbc-913a-fe1b-1e2078da8de3",
     "correct": false,
     "answer": "To find the total of all the scores"
    },
    {
     "_id": "540543ca-6a9d-d5d9-a69a-b13cd08eb734",
     "correct": true,
     "answer": "To find out who had the lowest score"
    },
    {
     "_id": "2218197f-44d0-1283-23c4-b855e94a2149",
     "correct": false,
     "answer": "To find the average score"
    }
   ],
   "guidance": "The `min` function returns the smallest value, so it would be used to find out who had the lowest score.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Min function"
     }
    ],
    "files": [
     "code/lists/list-min.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-min.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine the right situation for the min function"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4085522795",
  "source": {
   "name": "reading question max function",
   "showName": false,
   "instructions": "## Reading Question\nClick on all of the data types that work with the `max` functions. **Hint**, there are more than one correct answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "e7cd3666-662d-2473-8fc1-67901b53cdea",
     "correct": true,
     "answer": "When the list is composed of only strings."
    },
    {
     "_id": "93b47ab7-7809-7936-01b9-31e2bb88e991",
     "correct": false,
     "answer": "When the list is composed of numbers and strings."
    },
    {
     "_id": "0f6222fa-4e18-958b-ff62-147a4213576f",
     "correct": true,
     "answer": "When the list is composed of floats and ints."
    },
    {
     "_id": "a9007604-15d4-88e3-1f78-3be76bbe5ad1",
     "correct": true,
     "answer": "When the list is composed of just ints."
    }
   ],
   "guidance": "The `max` function can work with numbers, both floats and ints. The `max` function can also work with strings, but the list must be entirely strings. Mixing numbers and strings will cause an error.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Max function"
     }
    ],
    "files": [
     "code/lists/list-max.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-max.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT recognize the data types that work with the max function"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3889301665",
  "source": {
   "name": "formative assessment 1 list of numbers",
   "showName": false,
   "instructions": "## List of Numbers\nFill in the blanks with the proper code for each of the variables below. You are given the list `my_list` to help you write your code.",
   "text": "my_list = [14, 56, 71, 29 ,40, 11]\ntotal = <<<sum(my_list)>>>\nlargest = <<<max(my_list)>>>\nsmallest = <<<min(my_list)>>>",
   "guidance": "The variable `total` is looking for the sum of the elements in the list. `total = sum(my_list)`\n\nThe variable `largest` is looking for the largest element in the list. `largest = max(my_list)`\n\nThe variable `smallest` is looking for the smallest element in the list. `smallest = min(my_list)`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Min, max, and sum functions"
     }
    ],
    "files": [
     "code/lists/list-max.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-max.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT use min, max, and sum in the appropriate context",
   "tokens": {
    "blank": [
     "sum(my_list)",
     "max(my_list)",
     "min(my_list)"
    ],
    "text": [
     "my_list = [14, 56, 71, 29 ,40, 11]\ntotal = ",
     0,
     "\nlargest = ",
     0,
     "\nsmallest = ",
     0
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-3902608667",
  "source": {
   "name": "formative assessment 2 list of numbers",
   "showName": false,
   "instructions": "## List of Numbers\nDrag the appropriate code blocks to the box below. Your code will end with the block `print(result)`. Arrange the code blocks in such a way that `result` would be 11. **Hint**, not all of the blocks will be used.",
   "initial": "my_list = [1, 2, 3, 4, 5]\nresult = sum(my_list) + min(my_list) - max(my_list)\nprint(result)\nresult = min(my_list) + max(my_list) - sum(my_list) #distractor\nresult = sum(my_list) - min(my_list) - max(my_list) #distractor\nresult = sum(my_list) + min(my_list) + max(my_list) #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "First start with defining the variable `my_list`. Next, calculate the sum, min, and max of `my_list`. The sum is 15, the min is 1, and the max is 5. To make `result` equal 11, you add the min to the sum (16) and then subtract the max.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Min, max, and sum functions"
     }
    ],
    "files": [
     "code/lists/list-max.py"
    ],
    "opened": []
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT to do calculations using the min, max, and sum functions"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-608694394",
  "source": {
   "name": "formative assessment 2 list of numbers",
   "showName": false,
   "instructions": "## List of Numbers\nImagine that you have a list called `my_list`. Which code sample would calculate the min, the max, and the average of `my_list`.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "81c6d598-750a-9ca6-b1b5-d143babe8a5f",
     "correct": false,
     "answer": "```\nminimum = min(my_list)\nmaximum = max(my_list)\naverage = avg(my_list)\n```"
    },
    {
     "_id": "9c88b89d-263d-abf3-50e8-333c6c4a0619",
     "correct": true,
     "answer": "```\nminimum = min(my_list)\nmaximum = max(my_list)\naverage = sum(my_list) / len(my_list)\n```"
    },
    {
     "_id": "da7b947d-6317-c80e-96a9-66cf11c62d7d",
     "correct": false,
     "answer": "```\nminimum = max(my_list)\nmaximum = min(my_list)\naverage = sum(my_list) / len(my_list)\n```"
    },
    {
     "_id": "df112b04-f903-6d14-692d-12a55d25ed72",
     "correct": false,
     "answer": "```\nminimum = min(my_list)\nmaximum = max(my_list)\naverage = len(my_list) / sum(my_list)\n```"
    }
   ],
   "guidance": "To calculate the minimum value of the list, use `minimum = min(my_list)`.\nTo calculate the maximum value of the list, use `maximum = max(my_list)`.\nTo calculate the average value of the list, find the sum of the list and then divide by the length of the list - `avg = sum(my_list) / len(my_list)`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4088401606",
  "source": {
   "name": "reading question list iteration",
   "showName": false,
   "instructions": "## Reading Question\nFill in the blanks below to complete the for loop that iterates over the list `colors` and prints each item in the list.",
   "text": "colors = [\"red\", \"green\", \"blue\", \"yellow\", \"black\"]\nfor <<<color>>> in <<<colors>>>:\n    print(<<<color>>>)",
   "guidance": "The solution to this problem is based on the naming convention that the variable for iteration is the singular of the list. Since the list is `colors`, then the iteration variable is `color`. The iteration variable is also used with the `print` statement.\n\n```python\ncolors = [\"red\", \"green\", \"blue\", \"yellow\", \"black\"]\nfor color in colors:\n    print(color)\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "List"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List iteration"
     }
    ],
    "files": [
     "code/lists/list-iterate.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-iterate.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT to apply the naming convention for list iteration",
   "tokens": {
    "blank": [
     "color",
     "colors",
     "color"
    ],
    "text": [
     "colors = [\"red\", \"green\", \"blue\", \"yellow\", \"black\"]\nfor ",
     0,
     " in ",
     0,
     ":\n    print(",
     0,
     ")"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4064533170",
  "source": {
   "name": "reading question while loop list iteration",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich of the following things must you do manually when iterating over a list with a while loop? **Hint**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "461692ef-82b8-8d5b-786b-47d6b280ec88",
     "correct": true,
     "answer": "Create a variable for the length of the list."
    },
    {
     "_id": "0f94deec-1165-dfb2-3a70-5121455b314a",
     "correct": true,
     "answer": "Create a variable for the index."
    },
    {
     "_id": "324284dc-52db-317a-f074-85f84d85624e",
     "correct": true,
     "answer": "Reference a list element with the list name and index."
    },
    {
     "_id": "647a95fc-0d22-0c3d-ef62-6e093389321c",
     "correct": true,
     "answer": "Increment the index variable."
    }
   ],
   "guidance": "All of the listed tasks must be done manually when using a while loop to iterate over a list.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List iteration while loop"
     }
    ],
    "files": [
     "code/lists/list-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT understand how to iterate over a list with a while loop"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-172255665",
  "source": {
   "name": "formative assessment 1 list iteration",
   "showName": false,
   "instructions": "## List Iteration\nDrag the appropriate code blocks to the box below. Your code should be a for loop that iterates over a list called `animals` and prints each element in the list.",
   "initial": "for animal in animals:\n    print(animal)\nwhile animal in animals: #distractor\nprint(animals[i]) #distractor\nfor animals in animals: #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "```python\nfor animal in animals:\n    print(animal)\n```\n\nThe convention is for loops is to use a variable that is the singular of the list. This same variable is used to reference the element in the list.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Iteration for loop"
     }
    ],
    "files": [
     "code/lists/list-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct a for loop that iterates over a list"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1661992395",
  "source": {
   "name": "formative assessment 2 list iteration",
   "showName": false,
   "instructions": "## List Iteration\nFill in the blanks below to make a while loop that iterates over a list called `colors` and prints each element in the list.",
   "text": "length = <<<len(colors)>>>\ni = <<<0>>>\n\nwhile <<<i>>> < <<<length>>>:\n    print(<<<colors[i]>>>)\n    i += <<<1>>>",
   "guidance": "While loops require that you determine the length of a list, create an index variable, check to see if the index is greater than the length of the list, reference the element with the list name and index, and increment the index variable.\n\n```python\nlength = len(colors)\ni = 0 \n\nwhile i < length:\n    print(colors[i]) \n    i += 1 \n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "List iteration while loop"
     }
    ],
    "files": [
     "code/lists/list-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT iterate over a list with a while loop",
   "tokens": {
    "blank": [
     "len(colors)",
     "0",
     "i",
     "length",
     "colors[i]",
     "1"
    ],
    "text": [
     "length = ",
     0,
     "\ni = ",
     0,
     "\n\nwhile ",
     0,
     " < ",
     0,
     ":\n    print(",
     0,
     ")\n    i += ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-798976136",
  "source": {
   "name": "lab question list operators",
   "showName": false,
   "instructions": "## Append versus Concatenate\nWhy does the program above use the `append` method instead of the concatenate operator (`+`) when adding a number to either the `odd` or `even` lists?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "a3ee2078-9661-73a7-6807-423818a0c568",
     "correct": false,
     "answer": "You cannot concatenate lists"
    },
    {
     "_id": "c6756a90-897a-55e9-b872-264bdf2ca710",
     "correct": false,
     "answer": "Either `append` or `+` would work"
    },
    {
     "_id": "46c59224-ebd9-3b5a-da03-fa8de8fde545",
     "correct": true,
     "answer": "Because you need two lists in order to concatenate"
    },
    {
     "_id": "e26e0b47-cf7e-9b29-501e-0ef46b144a8c",
     "correct": false,
     "answer": "Because `append` comes first alphabetically"
    }
   ],
   "guidance": "The `append` method adds a value to a list. The concatenate operator combines two lists. Since `number` is an int and not a list, you must use the `append` method.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append method"
     }
    ],
    "files": [
     "code/lists/lab-odd-even.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-odd-even.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT recognize when to use append and not concatenate"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2639349764",
  "source": {
   "name": "lab question sum",
   "showName": false,
   "instructions": "## Calculating Sum\nWhy was the variable called `total` and not `sum`?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "6e0628da-5e35-ee38-659c-3197464c31f9",
     "correct": false,
     "answer": "Using `total` causes the program to run faster."
    },
    {
     "_id": "8016f561-8aa8-dc61-2e69-8f94ac7dc7c0",
     "correct": false,
     "answer": "`total` is a more descriptive variable name than `sum`."
    },
    {
     "_id": "1af540ac-3834-ef7a-b546-7b10bb55d8d4",
     "correct": true,
     "answer": "`sum` is a keyword reserved for the `sum` function. Variable names cannot be a keyword."
    },
    {
     "_id": "ec571b34-c1c7-73a2-49b6-7dde777cbcad",
     "correct": false,
     "answer": "Python mandates that cumulative totals must be stored in a variable called `total`."
    }
   ],
   "guidance": "`sum` is a reserved keyword in Python. Variable names cannot be one of these keywords. `total` is used because it is an accurate description of the job of the variable, and it is not a keyword.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variable"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Keyword, naming"
     }
    ],
    "files": [
     "code/lists/lab-sum.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-sum.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT choose a variable name that is not a keyword"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1589399517",
  "source": {
   "name": "lab list slicing a list",
   "showName": false,
   "instructions": "Fill in the blanks below. Using the list `my_list`, complete the `slice` operator so that it returns `[21, 17, 33]`.",
   "text": "my_list = [45, 99, 21, 17, 33, 7]\nmy_list[<<<2>>>:<<<5>>>]",
   "guidance": "The first element in the answer is `21`. Starting with 0, the index of `21` is 2. The third element in the answer is `33`. The index for `33` is 4. However, the second parameter of the `slice` operator does not include the element. Use 5 to ensure the slice includes `33`.\n\n`my_list[2:5]`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     }
    ],
    "files": [
     "code/lists/lab-slice.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-slice.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "",
   "tokens": {
    "blank": [
     "2",
     "5"
    ],
    "text": [
     "my_list = [45, 99, 21, 17, 33, 7]\nmy_list[",
     0,
     ":",
     0,
     "]"
    ]
   }
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-1990229047",
  "source": {
   "name": "lab sorting colors",
   "showName": true,
   "instructions": "Drag the appropriate code blocks to the box below. Your program should use a list, the `in` operator, and a conditional to print `\"True\"`. **Hint**, not all of the code blocks will be used.",
   "initial": "my_list = [11, 71, 65, 42, 3]\nif 3 in my_list:\n    print(\"True\")\nif 6 in list: #distractor\nmy_list = [13, 33, 23, 88, 9] #distractor\nlist_1 = [3, 52, 198, 76, 20] #distractor",
   "options": "{\n  \"sortableId\": \"sortable\",\n  \"trashId\": \"sortableTrash\"\n}",
   "grader": "",
   "guidance": "Here is the solution:\n```python\nmy_list = [11, 71, 65, 42, 3]\nif 3 in my_list:\n    print(\"True\")\n```\n\n* `if 6 in list:` - 6 does exist in any of the lists\n* `my_list = [13, 33, 23, 88, 9]` - does not have the element 3\n* `list_1 = [3, 52, 198, 76, 20]` - there is no `in` statement that references `list_1`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "In statement"
     }
    ],
    "files": [
     "code/lists/lab-color-sort.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-color-sort.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "4",
   "learningObjectives": "SWBAT use the in statement to find an element in a list"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3211690469",
  "source": {
   "name": "list lab challenge",
   "showName": false,
   "instructions": "When you are ready, submit your code to be graded.",
   "command": "python3 code/lists/lab-challenge.py",
   "preExecuteCommand": "",
   "guidance": "There are several ways to solve this problem. Here is one solution. Start by declaring an empty list `final_result` that will hold the final result of your program. Iterate through the list `numbers`. Use modulo to determine if the element in `numbers` is odd or even. If it is odd, append the string `\"odd\"` to `final_result`. If the element is even, append the string `\"even\"` to`final_result`. After iterating through `numbers`, print `final_result`.\n\n```python\nfinal_result =[]\nfor number in numbers:\n    if number % 2 == 0:\n      final_result.append(\"even\")\n    else:\n      final_result.append(\"odd\")\nprint(final_result)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "5 6 7 8",
     "input": "",
     "output": "['odd', 'even', 'odd', 'even']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "4 3 7 6 8 9 10 23 44",
     "input": "",
     "output": "['even', 'odd', 'odd', 'even', 'even', 'odd', 'even', 'odd', 'even']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "7 7 7 7 7",
     "input": "",
     "output": "['odd', 'odd', 'odd', 'odd', 'odd']",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Iterate, append method, modulo"
     }
    ],
    "files": [
     "code/lists/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT iterate over a list, append to another list, use modulo"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3095758084",
  "source": {
   "name": "lists exercise 1",
   "showName": false,
   "instructions": "Submit your code when you are ready.",
   "command": "python3 code/lists/exercise1.py",
   "preExecuteCommand": "",
   "guidance": "The trick to this problem is being able to access the index of the list. The basic format of this is `list[index]`. However, you will need to use the `index` method to find the index of `number`.\n\n```python\nfor number in numbers:\n    if number > 10:\n        numbers[numbers.index(number)] = '*'\n\nprint(numbers)\n```\n\n",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "10 50 60 9",
     "input": "",
     "output": "[10, '*', '*', 9]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "5 10 5 10 5 10 5 10",
     "input": "",
     "output": "[5, 10, 5, 10, 5, 10, 5, 10]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "17 8 16 5 42 3 21",
     "input": "",
     "output": "['*', 8, '*', 5, '*', 3, '*']",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "For loop, index method"
     }
    ],
    "files": [
     "code/lists/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT use a for loop and iteration variable to modify elements in a list"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2183474331",
  "source": {
   "name": "exercise 2 lists",
   "showName": false,
   "instructions": "Submit your code when ready",
   "command": "python3 .guides/secure/lists-exercises-2-test.py",
   "preExecuteCommand": "",
   "guidance": "Test the length of the list. If it is greater than 5, use the `*` operator to repeat the list 3 times. Else, print the list once.\n\n\n```python\nif len(my_list) < 5:\n  print(my_list * 3)\nelse:\n  print(my_list)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "'cat' 'dog'",
     "input": "",
     "output": "['cat', 'dog', 'cat', 'dog', 'cat', 'dog']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1 2 3 4 5 6",
     "input": "",
     "output": "['1', '2', '3', '4', '5', '6']",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "1 2 3",
     "input": "",
     "output": "['1', '2', '3', '1', '2', '3', '1', '2', '3']",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Category",
      "value": "Repeat list, * operator"
     }
    ],
    "files": [
     "code/lists/exercise2.py",
     "code/lists/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": "SWBAT repeat a list with the `*` operator"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4058655817",
  "source": {
   "name": "exercise 3 lists",
   "showName": false,
   "instructions": "**Do not** submit your code to be graded with the variable strings. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lists-exercises-3-test.py",
   "preExecuteCommand": "",
   "guidance": "To arrange a list in alphabetical order, use the `sort` method. To remove the first element from the list, you can use the `pop` method, but don't forget to pass 0 as the parameter so you will remove the first element. If you don't pass 0 as a parameter, `pop` will remove the last element. You can also use `print(strings[0])` as well.\n\n```python\nstrings.sort()\nprint(strings.pop(0))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "cat dog bird zebra apple",
     "input": "",
     "output": "apple",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "zebra act boy 1 nest",
     "input": "",
     "output": "1",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "aaa apple ask announce about",
     "input": "",
     "output": "aaa",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Sort method, pop method"
     }
    ],
    "files": [
     "code/lists/exercise3.py",
     "code/lists/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT sort a list and remove the first element"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3335272242",
  "source": {
   "name": "exercise 4 lists",
   "showName": false,
   "instructions": "**Do not** submit your code to be graded with the variable `numbers`. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lists-exercises-4-test.py",
   "preExecuteCommand": "",
   "guidance": "First, you need to find what is the last element in the list. There are several ways to do this, but the most concise is `numbers[-1]`. You are going to append a number that is 1 greater than `numbers[-1]` to the list `numbers`. Do this a second time. Since an action is repeated, a loop would work well. Finally, print the newly modified list.\n\n```python\nfor i in range(2):\n  numbers.append(numbers[-1] +1)\n\nprint(numbers)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "3 4 5 6",
     "input": "",
     "output": "[3, 4, 5, 6, 7, 8]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "9 10 11 12",
     "input": "",
     "output": "[9, 10, 11, 12, 13, 14]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "20 21 22 23 24",
     "input": "",
     "output": "[20, 21, 22, 23, 24, 25, 26]",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Append method, -1 index"
     }
    ],
    "files": [
     "code/lists/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT reference the last element in a list, and append elements to the list"
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1616286894",
  "source": {
   "name": "lists exercise 5",
   "showName": false,
   "instructions": "**Do not** submit your code to be graded with the variable `numbers`. The auto-grader will declare the variable for you.",
   "command": "python3 .guides/secure/lists-exercises-5-test.py",
   "preExecuteCommand": "",
   "guidance": "The solution that works best is one in which you can easily access the index of element as you iterate through the list. The traditional for loop that uses `numbers[numbers.index(number)]` to access the index can cause a problem when the list `numbers` is full of the same number. The `index` method returns the lowest index for repeating elements in a list.\n\nThis solution will use a while loop. First, calculate the length of the list and declare a variable for the index as 0. Set up your while loop and ask if the index is an odd number. If yes, insert a `'*'` at the location of `index`. Once you insert a new element in the list, you need to increment the `length` variable to reflect this change. Because this is a while loop, you need to manually increment the `index` variable. Finally, print the list.\n\n```python\nlength = len(numbers)\nindex = 0\n\nwhile index < length:\n  if index % 2 != 0:\n    numbers.insert(index, '*')\n    length += 1\n  index += 1\n    \nprint(numbers)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "showExpectedAnswer": true,
   "sequence": [
    {
     "arguments": "1 2 3 4",
     "input": "",
     "output": "[1, '*', 2, '*', 3, '*', 4]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "9 2 5 6",
     "input": "",
     "output": "[9, '*', 2, '*', 5, '*', 6]",
     "showFeedback": false,
     "feedback": ""
    },
    {
     "arguments": "2 4 6 8",
     "input": "",
     "output": "[2, '*', 4, '*', 6, '*', 8]",
     "showFeedback": false,
     "feedback": ""
    }
   ],
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Standard Code Test"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Iteration, insert method"
     }
    ],
    "files": [
     "code/lists/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT iterate over a list without the traditional for loop"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3547173064",
  "source": {
   "name": "formative assessment 2 list basics",
   "showName": false,
   "instructions": "## List Basics\nComplete the code below such that the second element becomes `7`.",
   "text": "my_list[1, 2, 3, 4]\nmy_list[<<<1>>>] <<<=>>> 7",
   "guidance": "The second element of an array uses the index of 1 (start counting with 0). The assignment operator (`=`) is used to modify the element.\n\n`my_list[1] = 7`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Modify a list"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT change the value of an element",
   "tokens": {
    "blank": [
     "1",
     "="
    ],
    "text": [
     "my_list[1, 2, 3, 4]\nmy_list[",
     0,
     "] ",
     0,
     " 7"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3785924639",
  "source": {
   "name": "reading question subtraction",
   "showName": false,
   "instructions": "## Reading Question\nRewrite the code below using the `-=` operator.\n\n```python\na = 42\nb = 17\na = a - b\n```",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "05fa8057-c4d7-9821-e81e-d11a070813cc",
     "correct": false,
     "answer": "a = a - b"
    },
    {
     "_id": "4d5e9894-b2d8-7471-80c0-1f135f8d62c0",
     "correct": false,
     "answer": "a =- b"
    },
    {
     "_id": "176ee3e7-7186-d047-7750-91058114d24f",
     "correct": true,
     "answer": "a -= b"
    },
    {
     "_id": "6477c7f6-3e9e-3920-6c5e-477935c7be38",
     "correct": false,
     "answer": "a += b"
    }
   ],
   "guidance": "The correct answer is `a -= b`. The `-` must come before the `=`. Using `+=` would perform addition, not subtraction. Finally, `a = a - b` does not make use of the `-=` operator.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Subtraction"
     }
    ],
    "files": [
     "code/operators/playground-subtract.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-subtract.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT use the -= operator"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1940684776",
  "source": {
   "name": "formative assessment 2 printing",
   "showName": false,
   "instructions": "Which statement below will print `Hi!` **without** a newline character?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0241f855-16b7-0ecd-7679-295ace8629b2",
     "correct": true,
     "answer": "`print(\"Hi!\", end='')`"
    },
    {
     "_id": "9f6cdfee-9c02-0383-9cd8-a2c1a2beb78c",
     "correct": false,
     "answer": "`print(\"Hi!\", end=N/A)`"
    },
    {
     "_id": "fec7e9d1-095f-3337-b6a6-55d1a3769450",
     "correct": false,
     "answer": "`print(\"Hi!\", stop='')`"
    },
    {
     "_id": "d63202cf-da3c-ff1b-c466-4ca9b8e25c14",
     "correct": false,
     "answer": "'print(\"Hi!\")"
    }
   ],
   "guidance": "By default, the `print` statement will add a newline character. To remove it, add `end=''` or `end=\"\"` to the print statement. The solution is `print(\"Hi!\", end='')`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Print "
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline character"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT remove newline character from the print statement"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3042873713",
  "source": {
   "name": "reading question integers",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect all of the properly formatted integers from the list below. **Note**, there is more than one right answer.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "7f62604f-2694-a6d7-7483-06f613c6d9b3",
     "correct": false,
     "answer": "\"20000\""
    },
    {
     "_id": "c3a1b475-5d9a-ba1a-b566-d441647192da",
     "correct": true,
     "answer": "20000"
    },
    {
     "_id": "6503f305-75a3-6d32-f42b-4331a982692f",
     "correct": false,
     "answer": "20,000"
    },
    {
     "_id": "a53ec453-8cf5-c1e3-488a-99ece062a5dc",
     "correct": true,
     "answer": "020000"
    }
   ],
   "guidance": "The correct answers are `20000` and 020000`. Commas are not used with larger numbers. Leading zeros do not affect Python's ability to work with integers. However, leading zeros can be confusing to programmers so they should be avoided. Quotation marks around an integer mean that the data type is a string.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Data Types"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Integers"
     }
    ],
    "files": [
     "code/fundamentals/playground-types-int.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/playground-types-int.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT Identify an integer"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-905140979",
  "source": {
   "name": "reading question increment",
   "showName": false,
   "instructions": "## Reading Question\nSelect the line of code below that increments the variable `a` by 1.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "dbd076c4-a17b-414f-7e63-c9845258c2ad",
     "correct": false,
     "answer": "a++"
    },
    {
     "_id": "2b1319d4-b622-95bd-4e38-52cb9ab72618",
     "correct": false,
     "answer": "a = 1"
    },
    {
     "_id": "7694eb12-94e4-bd7a-41b6-c9dd78f361cf",
     "correct": false,
     "answer": "a -= 1"
    },
    {
     "_id": "413ebd87-8338-d5e0-39d0-91525b4b5024",
     "correct": true,
     "answer": "a = a + 1"
    }
   ],
   "guidance": "The correct answer is `a = a + 1`. Increment means to increase the value, so `a -= 1` would not be acceptable. While some programming languages use `a++` to increment a variable by 1, Python does not do this. Finally, `a = 1` assigns the value of `a` to 1. It does not add 1 to the previous value of `a`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Increment"
     }
    ],
    "files": [
     "code/operators/playground-increment.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-increment.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT increment a variable"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3260112178",
  "source": {
   "name": "reading question string concatenation",
   "showName": false,
   "instructions": "## Reading Question\n\nThe code below should produce the output `I love string concatenation!`. \n\n```python\na = \"I love\"\nb = ???\nc = ???\nprint(c)\n```\n\nSelect the correct declarations for variables `b` and `c`. **Hint**, there are two answers for this question.",
   "multipleResponse": true,
   "answers": [
    {
     "_id": "8938927a-3ed9-d025-561e-5eec85a29026",
     "correct": false,
     "answer": "c = b + a"
    },
    {
     "_id": "0e75e9e9-dcdf-c2db-8e26-0e7b4c4d151c",
     "correct": true,
     "answer": "b = \" string concatenation!\""
    },
    {
     "_id": "9d90f685-e58d-dee0-d124-981c804241b0",
     "correct": true,
     "answer": "c = a + b"
    },
    {
     "_id": "066432e3-79a1-07e7-4454-4c5fede5e45e",
     "correct": false,
     "answer": "b = \"string concatenation\""
    }
   ],
   "guidance": "The correct answers are:\n\n```python\nb = \" string concatenation!\"\nc = a + b\n```\n\n`b = \"string concatenation\"` is incorrect because there needs to be a space between `love` and `string`. It is also missing the `!`. The response `c = b + a` would put `I love` at the end of the output, not the beginning.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String Concatenation"
     }
    ],
    "files": [
     "code/operators/playground-concatenation.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-concatenation.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT concatenate two strings"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-4102006681",
  "source": {
   "name": "reading question mulitiplication",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the line of code below that prints the product of the variables `a` and `b`.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "f83d3d01-9ab1-89d0-09df-7b17a9c673f5",
     "correct": false,
     "answer": "print(ab)"
    },
    {
     "_id": "1b6d094a-9761-15ca-d2a3-4f1d521b0acc",
     "correct": false,
     "answer": "print(a * c)"
    },
    {
     "_id": "92806582-b75e-1f14-e423-3ecef4f44d7b",
     "correct": false,
     "answer": "print(a x b)"
    },
    {
     "_id": "cdea5912-4892-2cb9-1af9-a62b0c7a7594",
     "correct": true,
     "answer": "print(a * b)"
    }
   ],
   "guidance": "Multiplication is done with the `*` operator. So the correct answer is `print(a * b)`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Multiplication"
     }
    ],
    "files": [
     "code/operators/playground-multiply.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-multiply.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT identify the proper symbol used for multiplication"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2214264847",
  "source": {
   "name": "reading question powers",
   "showName": false,
   "instructions": "## Reading Question\n\nSelect the line of code that would raise 7 to the power of 4.",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "857d63f1-e988-ac13-df1f-1986c4796dcb",
     "correct": false,
     "answer": "7 * 4"
    },
    {
     "_id": "35a077bc-e9a0-6ead-7c6d-475acd77b32e",
     "correct": true,
     "answer": "7 ** 4"
    },
    {
     "_id": "912c4fb0-3434-e730-a6f7-f262e68f3320",
     "correct": false,
     "answer": "7 ^ 4"
    },
    {
     "_id": "3147e2ff-9c31-935e-c5b4-96bfb5158c38",
     "correct": false,
     "answer": "4 ** 7"
    }
   ],
   "guidance": "The `**` operator is used to raise a number to a specific power. Since 7 is the base and 4 is the exponent, the answer is `7 ** 4`.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Powers"
     }
    ],
    "files": [
     "code/operators/playground-powers.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/playground-powers.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT raise a number to a power"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1619853519",
  "source": {
   "name": "lab question order of operations",
   "showName": false,
   "instructions": "## Order of Operations\n\nLooking at the expression below, identify the order of operations.\n\n`(1 + 2) * 4 ** 2 - 10`",
   "text": "Step 1: <<<1 + 2>>>\nStep 2: <<<4 ** 2>>>\nStep 3: <<<3 * 16>>>\nStep 4: <<<54 - 10>>>",
   "guidance": "Here is the solution:\n\n```\nStep 1: 1 + 2\nStep 2: 4 ** 2\nStep 3: 3 * 16\nStep 4: 54 - 10\n```\n\n`1 + 2` comes first because it is inside of parentheses. \n`4 ** 2` is second because it is an exponent (a power)\n`3 * 16` is the third step because multiplication and division come after exponents\n`54 - 10` is final step because addition and subtraction come last in order of operation",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Arithmetic Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Order of operations"
     }
    ],
    "files": [
     "code/operators/lab-order-of-operations.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-order-of-operations.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT apply order of operations to an expression",
   "tokens": {
    "blank": [
     "1 + 2",
     "4 ** 2",
     "3 * 16",
     "54 - 10"
    ],
    "text": [
     "Step 1: ",
     0,
     "\nStep 2: ",
     0,
     "\nStep 3: ",
     0,
     "\nStep 4: ",
     0
    ]
   }
  }
 },
 {
  "type": "test",
  "taskId": "test-3470894254",
  "source": {
   "name": "lab challenge question",
   "showName": false,
   "instructions": "## Lab Challenge\n\nWrite a boolean expression that incorporates one of the equality operators, one of the less than operators, one of the greater than operators, and two of the logical operators. The result of your boolean expression must be `False`.",
   "command": "python3 .guides/secure/operators-lab-challenge-test.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are many possible solutions to this problem.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean Operators"
     }
    ],
    "files": [
     "code/operators/lab-challenge.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/lab-challenge.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to write a complex boolean expression"
  }
 },
 {
  "type": "test",
  "taskId": "test-927174089",
  "source": {
   "name": "fundamentals exercise 1",
   "showName": false,
   "instructions": "## Exercise 1\nDeclare a variable `my_boolean` and assign it the boolean value of true. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-1-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are two parts to this problem. The first is to declare the variable `my_boolean` and assign it the value of `True`. The second is to print the value of the variable. Your code should look like this:\n\n```python\nmy_boolean = True\nprint(my_boolean)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Boolean"
     }
    ],
    "files": [
     "code/fundamentals/exercise1.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise1.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT create and print a boolean variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-4000027711",
  "source": {
   "name": "fundamentals exercise 2",
   "showName": false,
   "instructions": "## Exercise 2\nDeclare a variable `my_int` and assign it the integer value of 3. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-2-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Your program should declare the variable `my_int`, assign it the value of `3`, and then print the variable.\n\n```python\nmy_int = 3\nprint(my_int)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Integer Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise2.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise2.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print an integer variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-704473075",
  "source": {
   "name": "fundamentals exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nDeclare a variable `my_string` and assign it the string value of:\n\n`This is a string`\n\nPrint the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-3-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You need to create the variable `my_string`, assign it the value of `This is a string`, and then print the variable.\n\n```python\nmy_string = \"This is a string\"\nprint(my_string)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String Variable"
     }
    ],
    "files": [
     "code/fundamentals/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a string variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-3755746604",
  "source": {
   "name": "fundamentals exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nDeclare a variable `my_float` and assign it the floating point value of `3.0`. Print the variable.",
   "command": "python3 .guides/secure/fundamentals-exercise-4-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Your program should declare the variable `my_float`, assign it the value of `3.0`, and then print the variable.\n\n```python\nmy_float = 3.0\nprint(my_float)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Variables"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Float Variables"
     }
    ],
    "files": [
     "code/fundamentals/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT declare and print a float variable"
  }
 },
 {
  "type": "test",
  "taskId": "test-4241539602",
  "source": {
   "name": "fundamentals exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nUse **two** print statements to write the following string:\n\n`Okay, it is time to learn about operators.`",
   "command": "python3 .guides/secure/fundamentals-exercise-5-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are several ways to solve this problem, so there is no single solution. The key to this problem is removing the newline character from the first print statement. This will ensure that two print statements will produce a single line of output. Here is one possible solution.\n\n```python\nprint(\"Okay, \", end='')\nprint(\"it is time to learn about operators.\")\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Print "
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Newline Character"
     }
    ],
    "files": [
     "code/fundamentals/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/fundamentals/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT remove newline character from a print statement"
  }
 },
 {
  "type": "test",
  "taskId": "test-4112651185",
  "source": {
   "name": "operators exercise 3",
   "showName": false,
   "instructions": "## Exercise 3\nWrite a program that outputs `Hello world`. Your program must do the following things:\n\n* Use two variables, one with `Hello ` and the other with `world`.\n* Use a single print statement.",
   "command": "python3 .guides/secure/operators-exercise-3-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are many ways to solve this problem. The key is to use the `+` operator so you can concatenate the two string variables so that you only need one print statement. Here is on possible solution.\n\n```python\nvar_1 = \"Hello\"\nvar_2 = \" world\"\nprint(var_1 + var_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "String concatenation"
     }
    ],
    "files": [
     "code/operators/exercise3.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise3.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT concatenate two strings"
  }
 },
 {
  "type": "test",
  "taskId": "test-2308401645",
  "source": {
   "name": "operations exercise 4",
   "showName": false,
   "instructions": "## Exercise 4\nWrite a program that divides 7 by 2, but prints `3`.",
   "command": "python3 .guides/secure/operators-exercise-4-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Division in Python always returns a float, but your program is expected to return an int. Use the floor division operator (`//`) to return an int. Floor division also truncates `3.5` to `3`.\n\n```python\nprint(7 // 2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Floor Division"
     }
    ],
    "files": [
     "code/operators/exercise4.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise4.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-1772684521",
  "source": {
   "name": "operators exercise 5",
   "showName": false,
   "instructions": "## Exercise 5\nDeclare the variable `a` with the value `3.0`. Declare the variable `b` with the value `\"2\"`. Print `a` plus `b`, **but** have the output be `5`.",
   "command": "python3 .guides/secure/operators-exercise-5-helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "You are asked to add a float to a string and print an integer. You need to be able to typecast `a` and `b` so that the result is `5`.\n\n```python\na = 3.0\nb = \"2\"\nprint(int(a) + int(b))\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Operators"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Typecasting"
     }
    ],
    "files": [
     "code/operators/exercise5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/operators/exercise5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT to typecast variables"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-58370162",
  "source": {
   "name": "reading question while loops",
   "showName": false,
   "instructions": "## Reading Question\n\nFill in the blanks below with either `while` or `for`.",
   "text": "A <<<while>>> loop runs as long as a condition is true.\nA <<<for>>> loop automatically increments the counting variable.\nA <<<for>>> loop runs for a predetermined amount of times.\nA <<<while>>> loop must declare a counting variable.",
   "guidance": "A **while** loop runs as long as a condition is true.\nA **for** loop automatically increments the counting variable.\nA **for** loop runs for a predetermined amount of times.\nA **while** loop must declare a counting variable.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "For loop, While loop"
     }
    ],
    "files": [
     "code/loops/playground-while-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-while-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT differentiate between a for loop and a while loop",
   "tokens": {
    "blank": [
     "while",
     "for",
     "for",
     "while"
    ],
    "text": [
     "A ",
     0,
     " loop runs as long as a condition is true.\nA ",
     0,
     " loop automatically increments the counting variable.\nA ",
     0,
     " loop runs for a predetermined amount of times.\nA ",
     0,
     " loop must declare a counting variable."
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3591284404",
  "source": {
   "name": "break statement reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nWhat purpose does the `break` statement serve?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "0e8163a6-88d1-95db-2a0e-5d751809370a",
     "correct": false,
     "answer": "The `break` statement is used to let your code take a short pause."
    },
    {
     "_id": "45fd8e48-9dc4-81b0-659a-c1260c89afb2",
     "correct": false,
     "answer": "The `break` statement is required for every while loop."
    },
    {
     "_id": "bb268559-553f-476b-3e5f-eadf0578b32a",
     "correct": false,
     "answer": "The `break` statement is used to begin a loop."
    },
    {
     "_id": "b9028345-0a81-0ca5-1cfc-266134d9a55c",
     "correct": true,
     "answer": "The `break` statement is used to exit a loop."
    }
   ],
   "guidance": "The `break` statement is used to exit a loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Break statement"
     }
    ],
    "files": [
     "code/loops/playground-break-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-break-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define the purpose of the break statement"
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2059482387",
  "source": {
   "name": "formative assessment while loops",
   "showName": false,
   "instructions": "Fill in the blanks below so that the loop prints `Python` ten times.",
   "text": "<<<count>>> = 0\nwhile count <<<<>>> 10:\n    print(\"Python\")\n    count = count <<<+>>> 1",
   "guidance": "The first blank is `count`. You know this because in the while loop, Python is determining if `count` is less than 10. The second blank is `<`. Other boolean operators like `>` or `==` will not work. The condition would be false, and `Python` would not print. The third blank is `+`. The only way for this loop to end is for `count` to be greater than or equal to 10. Since `count` starts at 0, the variable must be incremented.\n\n```python\ncount = 0\nwhile count < 10:\n    print(\"Python\")\n    count = count + 1\n```",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "showValues": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Fill in the Blanks"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "While loops"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT to create a while loop",
   "tokens": {
    "blank": [
     "count",
     "<",
     "+"
    ],
    "text": [
     0,
     " = 0\nwhile count ",
     0,
     " 10:\n    print(\"Python\")\n    count = count ",
     0,
     " 1"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3201003218",
  "source": {
   "name": "reading question nested loops",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich definition best describes a nested loop?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "5ff0acf6-455b-307d-ae32-ac9f211002ef",
     "correct": false,
     "answer": "A nested loop is when you have two loops, one after the other."
    },
    {
     "_id": "1a22c05b-53cf-dadb-8406-fe2157a4cd1a",
     "correct": false,
     "answer": "A nested loop is when you have a while loop and a for loop in the same program."
    },
    {
     "_id": "1374afbb-9a74-0182-9399-dd2deb7ee391",
     "correct": true,
     "answer": "A nested loop is when a loop is inside another loop."
    },
    {
     "_id": "212ea34c-7e43-49a7-a8ea-e172e05213fa",
     "correct": false,
     "answer": "A nested loop is when you have more than one loop in your program."
    }
   ],
   "guidance": "A nested loop is when you have a loop inside of another loop.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Nested loops"
     }
    ],
    "files": [
     "code/loops/playground-nested-loops.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-nested-loops.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT define a nested loop"
  }
 },
 {
  "type": "test",
  "taskId": "test-1602144414",
  "source": {
   "name": "loops exercise 5 test",
   "showName": false,
   "instructions": "## Submit your work\nOnce you get your code working properly, submit it by clicking the button below.",
   "command": "python3 .guides/secure/loops-exercise-5-test.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Star with a loop for the numbers on each line. Since the numbers go from 1 to 5, the loop will be `for num in range(1,6):`. The next loop will print the`.` characters for each line. The pattern for the number of `.` is  `5 - num`. So the second loop is `for dots in range(5 - num, 0, -1)`. The `-1` means the loop counts down from `5 - num` to 0. Print the `.`, but be sure to remove the newline character with `end='`. Finally, print `num` at the end of the line.\n\n```python\nfor num in range(1,6):\n  for dots in range(5-num, 0, -1):\n    print(\".\", end='')\n  print(num)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Nested loops"
     }
    ],
    "files": [
     "code/loops/exercise-5.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/exercise-5.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "6",
   "learningObjectives": "SWBAT create a nested loop"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2506931680",
  "source": {
   "name": "reading question reverse method",
   "showName": false,
   "instructions": "## Reading Question\nSelect the correct result after performing the `reverse` method on the list `my_list`.\n\n`my_list = [\"hat\", 421, 37.2, False, \"Zebra\"]`",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "1cbba3c5-d8e1-dbbd-2148-b38b909e7b92",
     "correct": false,
     "answer": "[37.2, 421, False, \"hat\", \"Zebra\"]"
    },
    {
     "_id": "b79e6ede-d857-b551-596c-b56e5a98a567",
     "correct": true,
     "answer": "[\"Zebra\", False, 37.2, 421, \"hat\"]"
    },
    {
     "_id": "8d48006e-68e9-172b-3064-01ffe24b6eaa",
     "correct": false,
     "answer": "[\"hat\", 421, 37.2, False, \"Zebra\"]"
    },
    {
     "_id": "cf3e75a2-d8db-6720-a500-ae84afee96f7",
     "correct": false,
     "answer": "[\"tah\", 124, 2.73, eslaF, \"arbeZ\"]"
    }
   ],
   "guidance": "The `reverse` method reverses the order of the original list. The correct answer is:\n`[\"Zebra\", False, 37.2, 421, \"hat\"]`",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method"
     }
    ],
    "files": [
     "code/lists/list-reverse.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/lists/list-reverse.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT reverse a list"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2380011685",
  "source": {
   "name": "formative assessment 2 list methods",
   "showName": false,
   "instructions": "## List Methods\nYou are given the following code: `my_list = [\"Methods\", \"Python\"]`. You want the list to end up being: `my_list = [\"Python\", \"List\", \"Methods\"]`. What two methods do you need to use on `my_list` to get the desired result?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "8e605f1e-3e02-8abf-8a04-7163f575919a",
     "correct": true,
     "answer": "```python\nmy_list.reverse()\nmy_list.insert(1, \"List\")\n```"
    },
    {
     "_id": "e43a1877-45d2-b356-b299-c1bcd7e62153",
     "correct": false,
     "answer": "```python\nmy_list.reverse()\nmy_list.sort()\n```"
    },
    {
     "_id": "0208bee0-bc8f-9ea0-1e10-1be3d8e94832",
     "correct": false,
     "answer": "```python\nmy_list.reverse()\nmy_list.append(\"List\")\n```"
    },
    {
     "_id": "6ef3972e-fec1-5924-a5bd-858b8585cc45",
     "correct": false,
     "answer": "```python\nmy_list.reverse()\nmy_list.pop(\"List\")\n```"
    }
   ],
   "guidance": "There two things that need to be done. One is make `\"Python\"` come before `\"Methods\"` in the list. That is accomplished with the `reverse` method. The next thing to do is to add `\"List\"` between `\"Python\"` and `\"Methods\"`. Use the `insert` method to do this.\n\n```python\nmy_list.reverse()\nmy_list.insert(1, \"List\")\n```",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Lists"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "Reverse method, insert method"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "5",
   "learningObjectives": "SWBAT use reverse and insert methods to modify a list"
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2984696218",
  "source": {
   "name": "reading question for loops",
   "showName": false,
   "instructions": "## Reading Question\n\nWhich one of the for loop below will run 10 times?",
   "multipleResponse": false,
   "answers": [
    {
     "_id": "9c95c7dc-0d28-fd9c-df6c-39fc1b8385ef",
     "correct": false,
     "answer": "`for i in range(9):`"
    },
    {
     "_id": "8eb54521-0a78-e3d3-b4f9-f8d9d2a59b5b",
     "correct": false,
     "answer": "`for i in range(0, 10, 2):`"
    },
    {
     "_id": "35d6ae75-5765-b609-c56f-3bc360b668b3",
     "correct": false,
     "answer": "`for i in range(1, 10):`"
    },
    {
     "_id": "ced4dffb-22c4-50de-c93d-14e866486f52",
     "correct": true,
     "answer": "`for i in range(10):`"
    }
   ],
   "guidance": "The correct answer is: `for i in range(10)`. For loops in Python loops start counting with 0 and run up to but not including the number in `range`. The loop with `range(9)` runs 9 times. When two numbers are used with `range`, the first number is the starting number. So `range(1, 10)` runs 9 times because it starts at one and goes to 9. Three numbers used with `range` mean the starting number, the stopping number, and the increment. So `range(0, 10, 2)` starts at 2, goes up to (but not including) 10, and increments by 2. This loop runs 5 times.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "points": 1,
   "incorrectPoints": 0,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Multiple Choice"
     },
     {
      "name": "Content",
      "value": "Loops"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "For loops"
     }
    ],
    "files": [
     "code/loops/playground-for-loop.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/loops/playground-for-loop.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "2",
   "learningObjectives": "SWBAT determine how many times a for loop will run"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2754911191",
  "source": {
   "name": "if else statement formative assessment 2",
   "showName": false,
   "instructions": "Construct code that will print out messages based on the weather:\n * \"Bring an umbrella!\" if it is rainy but *not* windy\n * \"Wear a rain jacket.\" if it is rainy and windy\n * \"You might need a coat.\" if it is cold but *not* rainy\n * \"Enjoy your day!\" if it is *not* cold and *not* rainy\n\nAssume the following boolean variables have already been declared and initialized: `rainy`, `windy`, `cold`\n\n*Reminder* Please indent your code where appropriate.",
   "initial": "if rainy:\n    if windy:\n        print(\"Wear a rain jacket.\")\n    else:\n        print(\"Bring an umbrella!\")\nelse:\n    if cold:\n        print(\"You might need a coat.\")\n    else:\n        print(\"Enjoy your day!\")",
   "options": "{\n  \"sortableId\": \"sortable\"\n}",
   "grader": "",
   "guidance": "```python\nif rainy:\n    if windy:\n        print(\"Wear a rain jacket.\")\n    else:\n        print(\"Bring an umbrella!\")\nelse:\n    if cold:\n        print(\"You might need a coat.\")\n    else:\n        print(\"Enjoy your day!\")\n```\n\nBy nesting if-else statements, you can create 4 unique cases: rainy and windy, rainy but not windy, not rainy and cold, and not rainy or cold.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditonals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If else, nested"
     }
    ],
    "files": [],
    "opened": []
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT construct nested if else statements"
  }
 },
 {
  "type": "parsons-puzzle",
  "taskId": "parsons-puzzle-2680130036",
  "source": {
   "name": "elif statement reading question",
   "showName": false,
   "instructions": "## Reading Question\n\nDrag the boxes below into the correct order when evaluating a conditional.",
   "initial": "if\nelif\nelse",
   "options": "{\n  \"id\":\"sortableId\"\n}",
   "grader": "",
   "guidance": "The `if` statement is always evaluated first. Next, the `elif` statement is evaluated. You can have several `elif` statements, but they must come after the `if` statement. Finally, the `else` statement is evaluated. `if` and `elif` statements cannot appear after `else` unless it is a different conditional.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Parsons Puzzle"
     },
     {
      "name": "Content",
      "value": "Conditionals"
     },
     {
      "name": "Programming Language",
      "value": "Python"
     },
     {
      "name": "Category",
      "value": "If-elif-else statement"
     }
    ],
    "files": [
     "code/selection/elif-statement.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "code/selection/elif-statement.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "3",
   "learningObjectives": "SWBAT identify the proper order of the conditional keywords if, elif,and else"
  }
 }
]